{
  "name": "node-red-qiskit-functionality",
  "version": "0.0.1",
  "description": "Quantum Computing Functionality for Node-RED",
  "main": "index.js",
  "scripts": {
    "dev": "node-red",
    "lint": "eslint \"**/**/*.js\"",
    "lint-fix": "eslint --fix \"**/**/*.js\""
  },
  "author": "wangyiyuelva",
  "license": "Apache-2.0",
  "node-red": {
    "nodes": {
      "lower-case": "templates/lower-case.js",
      "CHSH-game-classic": "nodes/CHSH-game-classic/CHSH-game-classic.js",
      "CHSH-game-quantum": "nodes/CHSH-game-quantum/CHSH-game-quantum.js",
      "Standard-Gates": "nodes/documentation/circuits-and-operators/Circuit_Library/Standard_gates/Standard_gates.js",
      "N-local-circuits": "nodes/documentation/circuits-and-operators/Circuit_Library/N-local-circuits/N-local-circuits.js",
      "Parameters-N-local-circuits": "nodes/documentation/circuits-and-operators/Circuit_Library/N-local-circuits/Parameters-N-local-circuits.js",
      "Data-encoding-circuits": "nodes/documentation/circuits-and-operators/Circuit_Library/Data-encoding-circuits/Data-encoding-circuits.js",
      "Arithmetic-circuits": "nodes/documentation/circuits-and-operators/Circuit_Library/Arithmetic-circuits/Arithmetic-circuits.js",
      "Benchmarking-and-complexity-theory-circuit": "nodes/documentation/circuits-and-operators/Circuit_Library/Benchmarking-and-complexity-theory-circuit/Benchmarking-and-complexity-theory-circuit.js",
      "Time-evolution-circuits": "nodes/documentation/circuits-and-operators/Circuit_Library/Time-evolution-circuits/Time-evolution-circuits.js",
      "Quantum-circuits": "nodes/documentation/circuits-and-operators/Construct_circuits/quantum-circuits/quantum-circuits.js",
      "Add-x-gate": "nodes/documentation/circuits-and-operators/Construct_circuits/quantum-circuits/add-x-gate.js",
      "Definition": "nodes/documentation/circuits-and-operators/Construct_circuits/quantum-circuits/definition.js",
      "build-circuits": "nodes/documentation/circuits-and-operators/Construct_circuits/build-circuits/build-circuits.js",
      "compose": "nodes/documentation/circuits-and-operators/Construct_circuits/build-circuits/compose.js",
      "decompose": "nodes/documentation/circuits-and-operators/Construct_circuits/build-circuits/decompose.js",
      "to-gate": "nodes/documentation/circuits-and-operators/Construct_circuits/build-circuits/to-gate.js",
      "to-instruction": "nodes/documentation/circuits-and-operators/Construct_circuits/build-circuits/to-instruction.js",
      "parameterised-circuits": "nodes/documentation/circuits-and-operators/Construct_circuits/parameterised-circuits/parameterised-circuits.js",
      "if-statement":"nodes/documentation/circuits-and-operators/Classical_feedforward_and_control_flow/If-statement/If-statement.js",
      "with-statement":"nodes/documentation/circuits-and-operators/Classical_feedforward_and_control_flow/if-statement/with-statement.js",
      "condition-classical-registers":"nodes/documentation/circuits-and-operators/Classical_feedforward_and_control_flow/if-statement/condition-on-classical-registers.js",
      "switch-statement":"nodes/documentation/circuits-and-operators/Classical_feedforward_and_control_flow/Switch-statement/Switch-statement.js",
      "different-example":"nodes/documentation/circuits-and-operators/Classical_feedforward_and_control_flow/Switch-statement/different-example.js",
      "for-loop":"nodes/documentation/circuits-and-operators/Classical_feedforward_and_control_flow/For loop/for-loop.js",
      "while-loop":"nodes/documentation/circuits-and-operators/Classical_feedforward_and_control_flow/While loop/while-loop.js",
      "resynthesis": "nodes/documentation/circuits-and-operators/Synthesize_unitary_operators/Re-synthesis-for-circuit-optimization/Re-synthesis-for-circuit-optimization.js",
      "synthesis": "nodes/documentation/circuits-and-operators/Synthesize_unitary_operators/Synthesize_unitary_operators/Synthesize_unitary_operators.js",
      "resynthesis-decompose": "nodes/documentation/circuits-and-operators/Synthesize_unitary_operators/Re-synthesis-for-circuit-optimization/Re-synthesize-Decompose.js",
      "quantum-circuits": "nodes/documentation/circuits-and-operators/Bit-ordering-in-the-Qiskit-SDK/Qiskit-conventions/Quantum-circuits/Quantum-circuits.js",
      "circuit-diagrams": "nodes/documentation/circuits-and-operators/Bit-ordering-in-the-Qiskit-SDK/Qiskit-conventions/Circuit-diagrams/Circuit-diagrams.js",
      "integers": "nodes/documentation/circuits-and-operators/Bit-ordering-in-the-Qiskit-SDK/Qiskit-conventions/Integers/Integers.js",
      "strings": "nodes/documentation/circuits-and-operators/Bit-ordering-in-the-Qiskit-SDK/Qiskit-conventions/Strings/Strings.js",
      "statevector-matrices": "nodes/documentation/circuits-and-operators/Bit-ordering-in-the-Qiskit-SDK/Qiskit-conventions/Statevector-matrices/Statevector-matrices.js",
      "gates": "nodes/documentation/circuits-and-operators/Bit-ordering-in-the-Qiskit-SDK/Qiskit-conventions/Gates/Gates.js",
      "change-ordering":"nodes/documentation/circuits-and-operators/Bit-ordering-in-the-Qiskit-SDK/Change-ordering-in-Qiskit/Change-ordering-in-Qiskit.js",
      "saving":"nodes/documentation/circuits-and-operators/Saving_circuits_to_disk/Save-circuit_to_disk/Save-circuit-to-disk.js",
      "loading":"nodes/documentation/circuits-and-operators/Saving_circuits_to_disk/Save-circuit_to_disk/reload.js"
      

    }
  },
  "dependencies": {
    "python-shell": "^5.0.0"
  },
  "devDependencies": {
    "@eslint/js": "^9.5.0",
    "eslint": "^9.5.0"
  }
}