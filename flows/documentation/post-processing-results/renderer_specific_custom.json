[
    {
        "id": "ba735f940fa03cfc",
        "type": "inject",
        "z": "40abd99c86f26227",
        "name": "Start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 90,
        "y": 320,
        "wires": [
            [
                "0a90ecb3cc5e6f4a"
            ]
        ]
    },
    {
        "id": "5a238ef7fbefef8a",
        "type": "debug",
        "z": "40abd99c86f26227",
        "name": "Text circuit output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.result",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 140,
        "wires": []
    },
    {
        "id": "6eae54233c10e5e6",
        "type": "image",
        "z": "40abd99c86f26227",
        "name": "",
        "width": "500",
        "data": "payload.result.circuit_image",
        "dataType": "msg",
        "thumbnail": false,
        "active": true,
        "pass": false,
        "outputs": 0,
        "x": 440,
        "y": 400,
        "wires": []
    },
    {
        "id": "e6929ea8f1cdc304",
        "type": "image",
        "z": "40abd99c86f26227",
        "name": "",
        "width": "400",
        "data": "payload.result.circuit_image",
        "dataType": "msg",
        "thumbnail": false,
        "active": true,
        "pass": false,
        "outputs": 0,
        "x": 820,
        "y": 140,
        "wires": []
    },
    {
        "id": "bd06fcdd148aeeab",
        "type": "image",
        "z": "40abd99c86f26227",
        "name": "",
        "width": "500",
        "data": "payload.result.circuit_image",
        "dataType": "msg",
        "thumbnail": false,
        "active": true,
        "pass": false,
        "outputs": 0,
        "x": 960,
        "y": 400,
        "wires": []
    },
    {
        "id": "0a90ecb3cc5e6f4a",
        "type": "fold-draw",
        "z": "40abd99c86f26227",
        "name": "Fold Draw",
        "info": "# Part 6 of the [Visualize circuits guide.](https://docs.quantum.ibm.com/guides/visualize-circuits#)\r\n&nbsp;\r\n# This node shows a text output rendering for drawing a quantum circuit using <font style='background: lightgrey'>_`circuit.draw()`_</font> and the <font style='background: lightgrey'>_`fold`_</font> argument. The output is the diagram in text format and sets the maximum width for the output.\r\n```python\r\nfrom qiskit import QuantumCircuit\r\n \r\ncircuit = QuantumCircuit(1) \r\nfor _ in range(10):\r\n    circuit.h(0)\r\n# limit line length to 40 characters\r\ncircuit.draw(output=\"text\", fold=40)\r\n```\r\n ",
        "x": 250,
        "y": 320,
        "wires": [
            [
                "a234d75e787bac6b",
                "5a238ef7fbefef8a"
            ]
        ]
    },
    {
        "id": "ffb63f57cea59ba6",
        "type": "standalone-draw",
        "z": "40abd99c86f26227",
        "name": "Standalone Draw",
        "info": "# Part 9 of the [Visualize circuits guide.](https://docs.quantum.ibm.com/guides/visualize-circuits#)\r\n&nbsp;\r\n# This node shows a text output rendering for drawing a quantum circuit using the <font style='background: lightgrey'>_`circuit_drawer()`_</font> function instead of the and the <font style='background: lightgrey'>_`circuit.draw()`_</font> method. The function behaves identically to the method, except that it takes in a circuit object as a required argument.\r\n```python\r\nfrom qiskit import QuantumCircuit\r\nfrom qiskit.visualization import circuit_drawer\r\n \r\ncircuit = QuantumCircuit(1) \r\nfor _ in range(10):\r\n    circuit.h(0)\r\ncircuit_drawer(circuit, output=\"mpl\", plot_barriers=False)\r\n```\r\n ",
        "x": 810,
        "y": 320,
        "wires": [
            [
                "bd06fcdd148aeeab"
            ]
        ]
    },
    {
        "id": "a234d75e787bac6b",
        "type": "style-draw",
        "z": "40abd99c86f26227",
        "name": "Style Draw",
        "info": "# Part 7 of the [Visualize circuits guide.](https://docs.quantum.ibm.com/guides/visualize-circuits#)\r\n&nbsp;\r\n# This node shows a text output rendering for drawing a quantum circuit using <font style='background: lightgrey'>_`circuit.draw()`_</font> and the <font style='background: lightgrey'>_`style`_</font> argument. The output is a diagram using the mpl renderer with changes to the colors and outlines.\r\n```python\r\nfrom qiskit import QuantumCircuit\r\n \r\ncircuit = QuantumCircuit(1) \r\nfor _ in range(10):\r\n    circuit.h(0)\r\nstyle = {\"backgroundcolor\": \"lightgreen\"}\r\ncircuit.draw(output=\"mpl\", style=style)\r\n```\r\n ",
        "x": 430,
        "y": 320,
        "wires": [
            [
                "a7dc9f0ace8e7b0c",
                "6eae54233c10e5e6"
            ]
        ]
    },
    {
        "id": "a7dc9f0ace8e7b0c",
        "type": "scale-draw",
        "z": "40abd99c86f26227",
        "name": "Scale Draw",
        "info": "# Part 8 of the [Visualize circuits guide.](https://docs.quantum.ibm.com/guides/visualize-circuits#)\r\n&nbsp;\r\n# This node shows a text output rendering for drawing a quantum circuit using <font style='background: lightgrey'>_`circuit.draw()`_</font> and the <font style='background: lightgrey'>_`scale`_</font> argument. The output is a diagram with the mpl renderer with a scaled output.\r\n```python\r\nfrom qiskit import QuantumCircuit\r\n \r\ncircuit = QuantumCircuit(1) \r\nfor _ in range(10):\r\n    circuit.h(0)\r\n# Scale the mpl output to 1/2 the normal size\r\ncircuit.draw(output=\"mpl\", scale=0.5)\r\n```\r\n ",
        "x": 610,
        "y": 320,
        "wires": [
            [
                "ffb63f57cea59ba6",
                "e6929ea8f1cdc304"
            ]
        ]
    }
]