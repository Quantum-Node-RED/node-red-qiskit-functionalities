[
    {
        "id": "b0aa9cca58fade31",
        "type": "tab",
        "label": "Exact simulation: Debugging primitives",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "bc7044426ccda08c",
        "type": "image",
        "z": "b0aa9cca58fade31",
        "name": "Initial Circuit Image",
        "width": "300",
        "data": "payload.result.circuit_image",
        "dataType": "msg",
        "thumbnail": false,
        "active": true,
        "pass": false,
        "outputs": 0,
        "x": 790,
        "y": 240,
        "wires": []
    },
    {
        "id": "0c60522018e0dc78",
        "type": "debug",
        "z": "b0aa9cca58fade31",
        "name": "Result Class Output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.result.result_class",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 540,
        "wires": []
    },
    {
        "id": "de199fc8a64e946e",
        "type": "estimator-run-options",
        "z": "b0aa9cca58fade31",
        "name": "Set Estimator run options",
        "info": "# [Exact simulation with Qiskit SDK primitives guide.](https://docs.quantum.ibm.com/guides/simulate-with-qiskit-sdk-primitives#)\r\n&nbsp;\r\n# By default, the reference Estimator performs an exact statevector calculation based on the <font style='background: GhostWhite'>_`quantum_info.Statevector`_</font> class. However, this can be modified to introduce the effect of the sampling overhead (also known as \"shot noise\").\r\n# With the introduction of the new V2 interface, the sampling overhead in the Estimator is now more concretely defined. The new interface accepts a <font style='background: GhostWhite'>_`precision`_</font> argument that expresses the error bars that the primitive implementation should target for expectation values estimates, instead of the number of <font style='background: GhostWhite'>_`shots`_</font> used in the V1 interface.\r\n# StatevectorEstimator (V2)\r\nThe sampling overhead is now called <font style='background: GhostWhite'>_`precision`_</font>, and is defined exclusively at the <font style='background: GhostWhite'>_`.run()`_</font> method level. This allows for a more finely-grained tuning of the option all the way to the PUB level.\r\n This example assumes you have defined two circuits, each with its own array of observables.\r\n```python\r\n# Estimate expectation values for two PUBs, both with 0.05 precision.\r\nestimator.run([(isa_circuit1, isa_obs_array1), (isa_circuit2, isa_obs_array_2)], precision=0.05)\r\n```\r\n For a full example, see the [Primitives examples](https://docs.quantum.ibm.com/guides/primitives-examples#estimator-examples) page.\r\n# Estimator (V1)\r\nThe V1 interface specifies shots in the following ways:\r\n- Setting keyword arguments in the <font style='background: GhostWhite'>_`qiskit.primitives.Estimator.run`_</font> method.\r\n - Modifying the <font style='background: GhostWhite'>_`qiskit.primitives.Estimator `_</font> options.\r\nobject) with the <font style='background: GhostWhite'>_`JobV1.result`_</font> method. \r\n```python\r\njob = estimator.run(isa_circuit, isa_observable, shots=2048, seed=123)\r\nresult = job.result()\r\n```\r\n ",
        "x": 1350,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "d79fa7ece8c6896a",
        "type": "intro-to-debug",
        "z": "b0aa9cca58fade31",
        "name": "Introduction to debugging tools",
        "info": "# [Introduction to debugging tools guide.](https://docs.quantum.ibm.com/guides/debugging-tools#)\r\n&nbsp;\r\n# Quantum programs can be tested by running them on simulated devices and exploring their performance under realistic device noise models. This allows you to debug them before sending them to a physical system. Quantum simulators can be used to help develop and test programs before fine-tuning them and sending them to quantum hardware.Local simulators can do this with good performance and efficiency.\r\n# However, due to the cost of classically simulating quantum circuits scales exponentially with the number of qubits, circuits that are larger than 50 qubits or so generally cannot run on simulators. For such circuits, you can test smaller versions of the circuits that can be simulated classically or you can modify the circuits so that they become classically simulable, although less accurate.",
        "x": 210,
        "y": 600,
        "wires": [
            [
                "c5c69714e3d825b8",
                "65aa3cc38e1921f6",
                "5404ffc2be4dd03a",
                "4693a88fee90845e",
                "4c0de8e759c46714"
            ]
        ]
    },
    {
        "id": "65aa3cc38e1921f6",
        "type": "use-reference-estimator",
        "z": "b0aa9cca58fade31",
        "name": "Use the rerference Estimator",
        "info": "# [Exact simulation with Qiskit SDK primitives guide.](https://docs.quantum.ibm.com/guides/simulate-with-qiskit-sdk-primitives#)\r\n&nbsp;\r\n# There are two reference implementations of <font style='background: GhostWhite'>_`Estimator`_</font> in <font style='background: GhostWhite'>_`qiskit.primitives`_</font> that run on a local statevecotr simulators: the [StatevectorEstimator](https://docs.quantum.ibm.com/api/qiskit/qiskit.primitives.StatevectorEstimator) class andthe [Estimator](https://docs.quantum.ibm.com/api/qiskit/qiskit.primitives.Estimator) class. The  <font style='background: GhostWhite'>_`StatevectorEstimator`_</font> implements the new Estimator V2 interface introduced in the Qiskit SDK 1.0, and offers additional input vectorization features in comparison with the <font style='background: GhostWhite'>_`Estimator`_</font> class, which implements the legacy Estimator V1 interface. Both can take circuits, observables, and parameters as inputs and return the locally computed expectation values.\r\n# This node contains the code that prepares the inputs that will be used in the examples that follow and outputs the circuit.\r\n# Every code sample added in later nodes in the flow can be added directly below the previous code samples in your qiskit .\r\nfile or reordered for a cleaner look.\r\n# The expected input type for the observables is <font style='background: GhostWhite'>_`qiskit.quantum_info.SparsePauliOp.`_</font> Note that the circuit in the example is parametrized, but you can also run the Estimator on non-parametrized circuits. Also note that any circuit passed to an Estimator must not include any measurements.\r\n```python\r\nfrom qiskit import QuantumCircuit\r\nfrom qiskit.circuit import Parameter\r\nfrom qiskit.quantum_info import SparsePauliOp\r\nimport numpy as np\r\n\r\n# circuit for which you want to obtain the expected value\r\nqc = QuantumCircuit(2)\r\nqc.ry(Parameter('theta'), 0)\r\nqc.h(0)\r\nqc.cx(0,1)\r\nqc.draw(\"mpl\", style=\"iqp\")\r\n# observable(s) whose expected values you want to compute\r\nfrom qiskit.quantum_info import SparsePauliOp\r\nobservable = SparsePauliOp([\"II\", \"XX\", \"YY\", \"ZZ\"], coeffs=[1, 1, -1, 1])\r\n# value(s) for the circuit parameter(s)\r\nparameter_values = [[0], [np.pi/6], [np.pi/2]]\r\n```\r\n ",
        "x": 520,
        "y": 180,
        "wires": [
            [
                "bc7044426ccda08c",
                "9d7e5dd4b84cb114"
            ]
        ]
    },
    {
        "id": "a3ddd26a16c653a1",
        "type": "transpile-to-ISA",
        "z": "b0aa9cca58fade31",
        "name": "Transpile to ISA circuits and observables",
        "info": "# [Exact simulation with Qiskit SDK primitives guide.](https://docs.quantum.ibm.com/guides/simulate-with-qiskit-sdk-primitives#)\r\n&nbsp;\r\n# The Qiskit Runtime primitives workflow requires circuits and observables to be transformed to only use instructions supported by the system (referred to as instruction set architecture (ISA) circuits and observables). The reference primitives still accept abstract instructions, as they rely on local statevectorsimulations, but transpiling the circuit might still be beneficial in terms of circuit optimization.\r\n```python\r\n# Generate a pass manager without providing a backend\r\nfrom qiskit.transpiler.preset_passmanagers import generate_preset_pass_manager\r\n\r\npm = generate_preset_pass_manager(optimization_level=1)\r\nisa_circuit = pm.run(qc)\r\nisa_observable = observable.apply_layout(isa_circuit.layout)\r\n```\r\n ",
        "x": 1040,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "4693a88fee90845e",
        "type": "initialize-estimator",
        "z": "b0aa9cca58fade31",
        "name": "Initialize Estimator",
        "info": "# [Exact simulation with Qiskit SDK primitives guide.](https://docs.quantum.ibm.com/guides/simulate-with-qiskit-sdk-primitives#)\r\n&nbsp;\r\n# To use the Estimator V2 implementation, follow the instructions to instantiate a <font style='background: GhostWhite'>_`qiskit.primitives.StatevectorEstimator`_</font>. If you want to maintain your pre-existing workflow using an Estimator V1 implementation, you can also use the <font style='background: GhostWhite'>_`qiskit.primitives.Estimator`_</font> class. \r\n# The nodes used in this flow use the Estimator V2 implementation, but each node will contain example code for both implementations.\r\n# StatevectorEstimator (V2)\r\nInstantiate a <font style='background: GhostWhite'>_`qiskit.primitives.StatevectorEstimator`_</font>\r\n```python\r\nfrom qiskit.primitives import StatevectorEstimator\r\nestimator = StatevectorEstimator()\r\n```\r\n # Estimator (V1)\r\nInstantiate a <font style='background: GhostWhite'>_`qiskit.primitives.Estimator`_</font>\r\n```python\r\nfrom qiskit.primitives import Estimator\r\nestimator = Estimator()\r\n```\r\n ",
        "x": 490,
        "y": 480,
        "wires": [
            [
                "4a2fdd6d2717fab8"
            ]
        ]
    },
    {
        "id": "e1c09a25b1a2084f",
        "type": "run-estimator",
        "z": "b0aa9cca58fade31",
        "name": "Run the estimator",
        "info": "# [Exact simulation with Qiskit SDK primitives guide.](https://docs.quantum.ibm.com/guides/simulate-with-qiskit-sdk-primitives#)\r\n&nbsp;\r\n# To run the estimation and get results, more code has to be added. The example code used in this node only uses one circuit (of type <font style='background: GhostWhite'>_`QuantumCircuit`_</font> and one observable.\r\n# StatevectorEstimator (V2)\r\nRun the estimation by calling the <font style='background: GhostWhite'>_`StatevectorEstimator.run`_</font> method, which returns an instance of a <font style='background: GhostWhite'>_`PrimitiveJob`_</font> object. You can get the results from the job (as a <font style='background: GhostWhite'>_`qiskit.primitives.PrimitiveResult`_</font> object) with the <font style='background: GhostWhite'>_`qiskit.primitives.PrimitiveJob.result`_</font> method. \r\n```python\r\njob = estimator.run([(isa_circuit, isa_observable, parameter_values)])\r\nresult = job.result()\r\nprint(f\" > Result class: {type(result)}\")\r\n```\r\n # Estimator (V1)\r\nRun the estimation by calling the <font style='background: GhostWhite'>_`Estimator.run`_</font> method, which returns an instance of <font style='background: GhostWhite'>_`qiskit.providers.JobV1`_</font>. You can get the results from the job (as a <font style='background: GhostWhite'>_`EstimatorResult`_</font> object) with the <font style='background: GhostWhite'>_`JobV1.result`_</font> method. \r\n```python\r\npm = generate_preset_pass_manager(backend=backend, optimization_level=1)\r\nisa_circuit = pm.run(qc)\r\n\r\njob = estimator.run([isa_circuit]*3, [isa_observable]*3, parameter_values)\r\nresult = job.result()\r\nprint(f\" > Result class: {type(result)}\")\r\n```\r\n # Get the expected value from the result\r\n# StatevectorEstimator (V2)\r\nThe primitives V2 result outputs an array of <font style='background: GhostWhite'>_`PubResults`_</font>, where each item of the array is a PubResult object that contains in its data the array of evaluations corresponding to every circuit-observable combination in the PUB. To retrieve the expectation values and metadata for the first (and in this case, only) circuit evaluation, we must access the evaluation <font style='background: GhostWhite'>_`data`_</font> for PUB 0: \r\n```python\r\nprint(f\" > Expectation value: {result[0].data.evs}\")\r\nprint(f\" > Metadata: {result[0].metadata}\")\r\n```\r\n # Estimator (V1)\r\nThe primitives V1 result stores an array of values that can be accessed through the attribute <font style='background: GhostWhite'>_`EstimatorResult.values`_</font>, where the ith element is the expectation value corresponding to the ith circuit and ith observable. To see the values for the first (and in this case, only) circuit evaluation, we must access the first item of the array. \r\n```python\r\nprint(f\" > Expectation value: {result.values[0]}\")\r\nprint(f\" > Metadata: {result.metadata}\")\r\n```\r\n ",
        "x": 910,
        "y": 480,
        "wires": [
            [
                "0c60522018e0dc78",
                "360b6d3b6cc08806",
                "0b0a841e2498dc96",
                "78d3e408b16d3555"
            ]
        ]
    },
    {
        "id": "d9b9cb33a870f178",
        "type": "image",
        "z": "b0aa9cca58fade31",
        "name": "Initial Circuit Image",
        "width": "350",
        "data": "payload.result.circuit_image",
        "dataType": "msg",
        "thumbnail": false,
        "active": true,
        "pass": false,
        "outputs": 0,
        "x": 810,
        "y": 880,
        "wires": []
    },
    {
        "id": "1c01b002a9b881b4",
        "type": "inject",
        "z": "b0aa9cca58fade31",
        "name": "Start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 270,
        "y": 820,
        "wires": [
            [
                "5404ffc2be4dd03a"
            ]
        ]
    },
    {
        "id": "7ed277fc07e7cb5f",
        "type": "debug",
        "z": "b0aa9cca58fade31",
        "name": "Result Class Output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.result",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 1180,
        "wires": []
    },
    {
        "id": "5404ffc2be4dd03a",
        "type": "use-reference-sampler",
        "z": "b0aa9cca58fade31",
        "name": "Use the rerference Sampler",
        "info": "# [Exact simulation with Qiskit SDK primitives guide.](https://docs.quantum.ibm.com/guides/simulate-with-qiskit-sdk-primitives#)\r\n&nbsp;\r\n# Similar to the Estimator, there are two reference implementations of Sampler in qiskit.primitives: the  [StatevectorSampler](https://docs.quantum.ibm.com/api/qiskit/qiskit.primitives.StatevectorSampler) class and the [Sampler](https://docs.quantum.ibm.com/api/qiskit/qiskit.primitives.Sampler) class. The <font style='background: GhostWhite'>_`StatevectorSampler`_</font> implements the new Estimator V2 interface introduced in Qiskit 1.0, and offers additional input vectorization features in comparison with the<font style='background: GhostWhite'>_`Sampler`_</font> class, which implements the legacy Sampler V1 interface. Both can take circuits and parameters as inputs and return the results from sampling from the output probability  distributions, but they are expressed in different terms:\r\n# - BThe new StatevectorSampler (V2) output can be expressed as an array of sampled values (bitstring) or \"counts\" for each bitstring present in the output distribution.\r\n# - The Sampler (V1) output is always expressed as a quasi-probability distribution of output states.\r\n# The following code prepares the inputs used in the examples that follow. Note that these examples run a single parametrized circuit, but you can also run the Sampler on non-parametrized circuits.\r\nNote that any quantum circuit passed to a Sampler must include measurements.\r\n```python\r\nfrom qiskit import QuantumCircuit\r\n\r\nqc = QuantumCircuit(2)\r\nqc.h(0)\r\nqc.cx(0,1)\r\nqc.measure_all()\r\nqc.draw(\"mpl\", style=\"iqp\")\r\n```\r\n ",
        "x": 520,
        "y": 820,
        "wires": [
            [
                "d9b9cb33a870f178",
                "1f60a5a4695a2e59"
            ]
        ]
    },
    {
        "id": "58e34a4ce1c519f4",
        "type": "run-sampler",
        "z": "b0aa9cca58fade31",
        "name": "Run the sampler",
        "info": "# [Exact simulation with Qiskit SDK primitives guide.](https://docs.quantum.ibm.com/guides/simulate-with-qiskit-sdk-primitives#)\r\n&nbsp;\r\n# To run the Sampler and get results, more code has to be added. This node contains two examples\r\n# StatevectorSampler (V2)\r\n```python\r\n# execute 1 circuit with Sampler V2\r\njob = sampler.run([isa_circuit]) \r\npub_result = job.result()[0]\r\nprint(f\" > Result class: {type(pub_result)}\")\r\n```\r\n V2 primitives accept multiple PUBs as inputs, and each PUB gets its own result. Therefore, you can rundifferent circuits with various parameter/observable combinations, and retrieve the PUB results:\r\n```python\r\nfrom qiskit.transpiler.preset_passmanagers import generate_preset_pass_manager\r\n\r\n# create two circuits\r\ncircuit1 = qc.copy()\r\ncircuit2 = qc.copy()\r\n\r\n# transpile circuits\r\npm = generate_preset_pass_manager(optimization_level=1)\r\nisa_circuit1 = pm.run(circuit1)\r\nisa_circuit2 = pm.run(circuit2)\r\n# execute 2 circuits using Sampler V2\r\njob = sampler.run([(isa_circuit1), (isa_circuit2)])\r\npub_result_1 = job.result()[0]\r\npub_result_2 = job.result()[1]\r\nprint(f\" > Result class: {type(pub_result_1)}\")\r\nprint(f\" > Result class: {type(pub_result_2)}\")\r\n```\r\n # Sampler (V1)\r\nRun Sampler by calling the <font style='background: GhostWhite'>_`qiskit.primitives.Sampler.run`_</font> method, which returns an instance of <font style='background: GhostWhite'>_`qiskit.providers.JobV1`_</font>. You can get the results from the job (as a <font style='background: GhostWhite'>_`qiskit.primitives.SamplerResult`_</font> object) with the <font style='background: GhostWhite'>_`qiskit.providers.JobV1.result`_</font> method. \r\n```python\r\njob = sampler.run(isa_circuit)\r\nresult = job.result()\r\nprint(result)\r\n```\r\n ",
        "x": 900,
        "y": 1120,
        "wires": [
            [
                "7ed277fc07e7cb5f",
                "8d170364497956ee"
            ]
        ]
    },
    {
        "id": "763465f5d8cee5c0",
        "type": "sampler-run-options",
        "z": "b0aa9cca58fade31",
        "name": "sampler-run-options",
        "info": "# [Exact simulation with Qiskit SDK primitives guide.](https://docs.quantum.ibm.com/guides/simulate-with-qiskit-sdk-primitives#)\r\n&nbsp;\r\n# By default, the reference Sampler  performs an exact statevector calculation based on the <font style='background: GhostWhite'>_`quantum_info.Statevector`_</font> class. However, this can be modified to introduce the effect of the sampling overhead (also known as \"shot noise\").\r\n# With the introduction of the new V2 interface, the sampling overhead in the Sampler  is now more precisely defined. The new interface accepts a <font style='background: GhostWhite'>_`shots`_</font> argument that can be defined at the \"PUB level\".\r\n# StatevectorSampler (V2)\r\nThis example assumes you have defined two circuits.\r\n```python\r\n# Sample two circuits at 128 shots each.\r\nsampler.run([isa_circuit1, isa_circuit2], shots=128)\r\n# Sample two circuits at different amounts of shots. The \"None\"s are necessary\r\n# as placeholders\r\n# for the lack of parameter values in this example.\r\nsampler.run([(isa_circuit1, None, 123), (isa_circuit2, None, 456)])\r\n```\r\n For a full example, see the [Primitives examples](https://docs.quantum.ibm.com/guides/primitives-examples#sampler-examples) page.\r\n# Sampler (V1)\r\nThe V1 interface specifies shots in the following ways:\r\n- Setting keyword arguments in the <font style='background: GhostWhite'>_`Sampler.run`_</font> method.\r\n - Modifying the <font style='background: GhostWhite'>_`Sampler`_</font> options.\r\nobject) with the <font style='background: GhostWhite'>_`JobV1.result`_</font> method. \r\n```python\r\njob = sampler.run(isa_circuit,  shots=2048, seed=123)\r\nresult = job.result()\r\nprint(result)\r\n\r\n>> SamplerResult(quasi_dists=[{0: 0.5205078125, 3: 0.4794921875}], metadata=[{'shots': 2048}])```\r\n ",
        "x": 1840,
        "y": 1120,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-info-circle"
    },
    {
        "id": "4c0de8e759c46714",
        "type": "initialize-sampler",
        "z": "b0aa9cca58fade31",
        "name": "initialize-sampler",
        "info": "# [Exact simulation with Qiskit SDK primitives guide.](https://docs.quantum.ibm.com/guides/simulate-with-qiskit-sdk-primitives#)\r\n&nbsp;\r\n# To use the Sampler  V2 implementation, follow the instructions to instantiate a <font style='background: GhostWhite'>_`qiskit.primitives.StatevectorSamplerr`_</font>. If you want to maintain your pre-existing workflow using an Sampler  V1 implementation, you can also use the <font style='background: GhostWhite'>_`qiskit.primitives.Sampler `_</font> class. \r\n# The nodes used in this flow use the Sampler V2 implementation, but each node will contain example code for both implementations.\r\n# StatevectorSampler (V2)\r\n```python\r\nfrom qiskit.primitives import StatevectorSampler\r\nsampler = StatevectorSampler()\r\n```\r\n # Sampler (V1)\r\n```python\r\nfrom qiskit.primitives import Sampler\r\nsampler = Sampler()\r\n```\r\n ",
        "x": 490,
        "y": 1120,
        "wires": [
            [
                "0f4397e28d6091f0"
            ]
        ],
        "icon": "font-awesome/fa-info-circle"
    },
    {
        "id": "cf54b2e481abddec",
        "type": "sampler-distribution",
        "z": "b0aa9cca58fade31",
        "name": "Get Sampler proability distribution",
        "info": "# [Exact simulation with Qiskit SDK primitives guide.](https://docs.quantum.ibm.com/guides/simulate-with-qiskit-sdk-primitives#)\r\n&nbsp;\r\n# As mentioned before, the result retrieval step is different between V1 and V2 interfaces.\r\n# The V1 sampler gives access to quasi-probability distributions.\r\n# The V2 sampler returns measurement outcome samples in the form of bitstrings or counts. The bitstrings show the measurement outcomes, preserving the shot order in which they were measured. The V2 sampler result objects organize data in terms of their input circuits' classical register names, for compatibility with dynamic circuits.\r\n# Sampler (V2)\r\nThe name of the classical register defaults to \"meas\". This name will be used later to access the measurement bitstrings.\r\n```python\r\n# Define quantum circuit with 2 qubits\r\ncircuit = QuantumCircuit(2)\r\ncircuit.h(0)\r\ncircuit.cx(0, 1)\r\ncircuit.measure_all()\r\n# Draw circuit using ASCII art to print to console\r\ncircuit.draw()\r\n\r\n# Transpile circuit\r\npm = generate_preset_pass_manager(optimization_level=1)\r\nisa_circuit = pm.run(circuit)\r\n# Run using V2 sampler\r\nresult = sampler.run([circuit]).result()\r\n# Access result data for PUB 0\r\ndata_pub = result[0].data\r\n# Access bitstring for the classical register \"meas\"\r\nbitstrings = data_pub.meas.get_bitstrings()print(f\"The number of bitstrings is: {len(bitstrings)}\")\r\n# Get counts for the classical register \"meas\"job = sampler.run([(isa_circuit1), (isa_circuit2)])\r\ncounts = data_pub.meas.get_counts()\r\nprint(f\"The counts are: {counts}\")\r\n```\r\n # Sampler (V1)\r\nA quasi-probability distribution differs from a probability distribution in that negative values are also allowed. However, the quasi-probabilities must sum up to 1 like probabilities. Negative quasi-probabilities may appear when using error mitigation techniques. \r\n```python\r\n# Define quantum circuit with 2 qubits\r\ncircuit = QuantumCircuit(2)\r\ncircuit.h(0)\r\ncircuit.cx(0, 1)\r\ncircuit.measure_all()\r\n# Draw circuit using ASCII art to print to console\r\ncircuit.draw()\r\n\r\n# Transpile circuit\r\npm = generate_preset_pass_manager(optimization_level=1)\r\nisa_circuit = pm.run(circuit)\r\n# Run using V1 sampler\r\nresult = sampler_v1.run(isa_circuit).result()\r\nquasi_dist = result.quasi_dists[0]\r\nprint(f\"The quasi-probability distribution is: {quasi_dist}\")\r\n```\r\n If you prefer to see the output keys as binary strings instead of decimal numbers, you can use the qiskit.result.QuasiDistribution.binary_probabilities method.\r\n```python\r\nprint(quasi_dist.binary_probabilities())\r\n```\r\n ",
        "x": 1360,
        "y": 1120,
        "wires": [
            [
                "b0faa04fb2b24abb",
                "620fb5f45ce5e452",
                "0f4f8d5a6270081f",
                "8eb31decc0a7d268"
            ]
        ]
    },
    {
        "id": "b0faa04fb2b24abb",
        "type": "debug",
        "z": "b0aa9cca58fade31",
        "name": "Circuit Text Output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.result.circuit_text",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1670,
        "y": 1180,
        "wires": []
    },
    {
        "id": "93223ba2626902e4",
        "type": "inject",
        "z": "b0aa9cca58fade31",
        "name": "Start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 270,
        "y": 180,
        "wires": [
            [
                "65aa3cc38e1921f6"
            ]
        ]
    },
    {
        "id": "f26eb8e5b506e6c0",
        "type": "transpile-to-ISA",
        "z": "b0aa9cca58fade31",
        "name": "Transpile to ISA circuits and observables",
        "info": "# [Exact simulation with Qiskit SDK primitives guide.](https://docs.quantum.ibm.com/guides/simulate-with-qiskit-sdk-primitives#)\r\n&nbsp;\r\n# The Qiskit Runtime primitives workflow requires circuits and observables to be transformed to only use instructions supported by the system (referred to as instruction set architecture (ISA) circuits and observables). The reference primitives still accept abstract instructions, as they rely on local statevectorsimulations, but transpiling the circuit might still be beneficial in terms of circuit optimization.\r\n```python\r\n# Generate a pass manager without providing a backend\r\nfrom qiskit.transpiler.preset_passmanagers import generate_preset_pass_manager\r\n\r\npm = generate_preset_pass_manager(optimization_level=1)\r\nisa_circuit = pm.run(qc)\r\nisa_observable = observable.apply_layout(isa_circuit.layout)\r\n```\r\n ",
        "x": 1040,
        "y": 820,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-info-circle"
    },
    {
        "id": "360b6d3b6cc08806",
        "type": "debug",
        "z": "b0aa9cca58fade31",
        "name": "Expectation Value Output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.result.expectation_value",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 600,
        "wires": []
    },
    {
        "id": "0b0a841e2498dc96",
        "type": "debug",
        "z": "b0aa9cca58fade31",
        "name": "Metadata Output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.result.metadata",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 660,
        "wires": []
    },
    {
        "id": "620fb5f45ce5e452",
        "type": "debug",
        "z": "b0aa9cca58fade31",
        "name": "Bitstring Output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.result.the_number_of_bitstrings_is",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1660,
        "y": 1240,
        "wires": []
    },
    {
        "id": "0f4f8d5a6270081f",
        "type": "debug",
        "z": "b0aa9cca58fade31",
        "name": "Counts Output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.result.the_counts_are",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1660,
        "y": 1300,
        "wires": []
    },
    {
        "id": "c5c69714e3d825b8",
        "type": "qiskit-primatives",
        "z": "b0aa9cca58fade31",
        "name": "Qiskit SDK primatives",
        "info": "# [Exact simulation with Qiskit SDK primitives guide.](https://docs.quantum.ibm.com/guides/simulate-with-qiskit-sdk-primitives#)\r\n&nbsp;\r\n# The reference primitives in the Qiskit SDK perform local statevector simulations. These simulations do not support modeling device noise, but are useful for quickly prototyping algorithms before looking into more advanced simulation techniques [using Qisker Aer](https://docs.quantum.ibm.com/guides/simulate-stabilizer-circuits) or running on real devices [Qiskit Runtime primitives](https://docs.quantum.ibm.com/guides/primitives).\r\n# The <font style='background: GhostWhite'>_`Estimator`_</font> primitive can compute expectation values of circuits, and the <font style='background: GhostWhite'>_`Sampler`_</font> primitive can sample from output distributions of circuits.",
        "x": 500,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "99a05993fbfa49ea",
        "type": "inject",
        "z": "b0aa9cca58fade31",
        "name": "Start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 270,
        "y": 60,
        "wires": [
            [
                "c5c69714e3d825b8"
            ]
        ]
    },
    {
        "id": "869ed1e3e6804626",
        "type": "inject",
        "z": "b0aa9cca58fade31",
        "name": "Start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 270,
        "y": 1120,
        "wires": [
            [
                "4c0de8e759c46714"
            ]
        ]
    },
    {
        "id": "9d7e5dd4b84cb114",
        "type": "move-to-next-node",
        "z": "b0aa9cca58fade31",
        "name": "Next",
        "x": 770,
        "y": 180,
        "wires": [
            [
                "a3ddd26a16c653a1"
            ]
        ]
    },
    {
        "id": "4a2fdd6d2717fab8",
        "type": "move-to-next-node",
        "z": "b0aa9cca58fade31",
        "name": "Next",
        "x": 710,
        "y": 480,
        "wires": [
            [
                "e1c09a25b1a2084f"
            ]
        ]
    },
    {
        "id": "78d3e408b16d3555",
        "type": "move-to-next-node",
        "z": "b0aa9cca58fade31",
        "name": "Next",
        "x": 1130,
        "y": 480,
        "wires": [
            [
                "de199fc8a64e946e"
            ]
        ]
    },
    {
        "id": "1f60a5a4695a2e59",
        "type": "move-to-next-node",
        "z": "b0aa9cca58fade31",
        "name": "Next",
        "x": 770,
        "y": 820,
        "wires": [
            [
                "f26eb8e5b506e6c0"
            ]
        ]
    },
    {
        "id": "0f4397e28d6091f0",
        "type": "move-to-next-node",
        "z": "b0aa9cca58fade31",
        "name": "Next",
        "x": 710,
        "y": 1120,
        "wires": [
            [
                "58e34a4ce1c519f4"
            ]
        ]
    },
    {
        "id": "8d170364497956ee",
        "type": "move-to-next-node",
        "z": "b0aa9cca58fade31",
        "name": "Next",
        "x": 1110,
        "y": 1120,
        "wires": [
            [
                "cf54b2e481abddec"
            ]
        ]
    },
    {
        "id": "8eb31decc0a7d268",
        "type": "move-to-next-node",
        "z": "b0aa9cca58fade31",
        "name": "Next",
        "x": 1630,
        "y": 1120,
        "wires": [
            [
                "763465f5d8cee5c0"
            ]
        ]
    },
    {
        "id": "7427b52e949c3d76",
        "type": "inject",
        "z": "b0aa9cca58fade31",
        "name": "Start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 270,
        "y": 480,
        "wires": [
            [
                "4693a88fee90845e"
            ]
        ]
    }
]