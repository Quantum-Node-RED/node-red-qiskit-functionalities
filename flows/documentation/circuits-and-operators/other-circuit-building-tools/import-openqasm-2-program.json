[
    {
        "id": "ceb7d8abcacad129",
        "type": "tab",
        "label": "Import an OpenQASM 2 program into Qiskit",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "77e4eeaa6b42aafa",
        "type": "intro-to-OpenQASM",
        "z": "ceb7d8abcacad129",
        "name": "Introduction to OpenQASM",
        "x": 380,
        "y": 1260,
        "wires": [
            [
                "7a35b419e26c2d7f",
                "586b51974018e9c7",
                "95c4ba39b0d2ece1",
                "c21db9b211a5ab96"
            ]
        ],
        "info": "# **What is OpenQASM ?**\r\n&nbsp;\r\n# OpenQASM (open quantum assembly language), a machine-independent programming interface compatible with IBM Quantumâ„¢ systems, is an imperative programming language for describing quantum circuits. OpenQASM uses the quantum circuit model to express quantum programs as ordered sequences of parameterized operations (such as gates, measurements, and resets) and real-time classical computation. In addition to quantum algorithms, OpenQASM can describe circuits intended to characterize, validate, or debug quantum systems.\r\n&nbsp;\r\n# As the needs of quantum system development have evolved, OpenQASM's feature list has expanded in response; the latest version, [OpenQASM 3](https://arxiv.org/abs/2104.14722), incorporates extensions including classical feed-forward flow control, gate modifiers, and pulse implementations.\r\n&nbsp;\r\n# OpenQASM is the common interchange format among independent quantum software tools. For developers that prefer one tool for circuit construction, another for transpilation, and so forth, OpenQASM is the lingua franca that acts as a bridge among them.\r\n&nbsp;\r\n# The Qiskit SDK provides ways to convert between OpenQASM and the [QuantumCircuit](https://docs.quantum.ibm.com/api/qiskit/qiskit.circuit.QuantumCircuit) class. We will introduce you how both OpenQASM2 and OpenQASM3 are converted with the Circuit Class.\r\n&nbsp;\r\n# OpenQASM is the choice for a variety of audiences because of its versatility. For more information, view the [OpenQASM live specification](https://openqasm.com/)."
    },
    {
        "id": "7a35b419e26c2d7f",
        "type": "import-OpenQASM2-program",
        "z": "ceb7d8abcacad129",
        "name": "Import simple OpenQASM2 program",
        "x": 830,
        "y": 320,
        "wires": [
            [
                "b5135a33806c0c44",
                "5a2e38812dc50f67"
            ]
        ],
        "info": "# Two functions import OpenQASM 2 programs into Qiskit. These are <font style=\"background: lightgrey\">[qasm2.load()](https://docs.quantum.ibm.com/api/qiskit/qasm2#load)</font>, which takes a filename, and <font style=\"background: lightgrey\">[qasm2.loads()](https://docs.quantum.ibm.com/api/qiskit/qasm2#loads)</font>, which takes the OpenQASM 2 program as a string.\r\n&nbsp;\r\n# **In the following nodes, we will seperately demonstrate how these two methods convert OpenQASM2 programs into Qiskit QuantumCircuit instances.**\r\n&nbsp;\r\n# See the [OpenQASM 2 Qiskit API](https://docs.quantum.ibm.com/api/qiskit/qasm2) for more information."
    },
    {
        "id": "b5135a33806c0c44",
        "type": "import-OpenQASM2-program-as-string",
        "z": "ceb7d8abcacad129",
        "name": "Import simple OpenQASM2 program as string",
        "x": 1260,
        "y": 160,
        "wires": [
            [
                "c0845f538403d7ed"
            ]
        ],
        "info": "# **Example: import an OpenQASM 2 program as a string**\r\n&nbsp;\r\n# The first way for convertion is using <font style=\"background: lightgrey\">qasm2.loads()</font> to import an OpenQASM 2 program as a **string** into a QuantumCircuit.\r\n&nbsp;\r\n# In the following code snippet, we initialize a string variable 'program' containing an OpenQASM 2.0 quantum program, which applies a Hadamard gate to qubit 0, performs a controlled-NOT operation between qubit 0 and qubit 1, and finally measures the quantum register q into the classical register c.\r\n```python\r\nprogram = '''\r\n    OPENQASM 2.0;\r\n    include \"qelib1.inc\";\r\n    qreg q[2];\r\n    creg c[2];\r\n \r\n    h q[0];\r\n    cx q[0], q[1];\r\n \r\n    measure q -> c;\r\n'''\r\n```\r\n# Then, the <font style=\"background: lightgrey\">qasm2.loads()</font> function loads this OpenQASM program string into a Qiskit QuantumCircuit instance named 'circuit'.\r\n```python\r\nimport qiskit.qasm2\r\n\r\ncircuit = qiskit.qasm2.loads(program)\r\n```\r\n# You can check the image of generated circuit in the \"Image Output for String\" node."
    },
    {
        "id": "1b0c0e2a409d5c01",
        "type": "inject",
        "z": "ceb7d8abcacad129",
        "name": "Start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 90,
        "y": 1260,
        "wires": [
            [
                "77e4eeaa6b42aafa"
            ]
        ],
        "info": "# **In this flow, we will introduce you how to import an OpenQASM 2 program into Qiskit.**"
    },
    {
        "id": "c0845f538403d7ed",
        "type": "image",
        "z": "ceb7d8abcacad129",
        "name": "Image Output for String",
        "width": "360",
        "data": "payload.result.result_image",
        "dataType": "msg",
        "thumbnail": false,
        "active": true,
        "pass": false,
        "outputs": 0,
        "x": 1690,
        "y": 160,
        "wires": [],
        "info": "# The image of the circuit generated from string."
    },
    {
        "id": "5a2e38812dc50f67",
        "type": "import-OpenQASM2-program-from-file",
        "z": "ceb7d8abcacad129",
        "name": "Import simple OpenQASM2 program from file",
        "x": 1250,
        "y": 500,
        "wires": [
            [
                "5aeccdd35cc6eee5"
            ]
        ],
        "info": "# **Example: import an OpenQASM 2 program from a file**\r\n&nbsp;\r\n# The other way for convertion is using <font style=\"background: lightgrey\">load()</font> to import an OpenQASM 2 program from a **file** into a QuantumCircuit.\r\n&nbsp;\r\n# In this code snippet, we first create a qiskit circuit which does the same thing as the string program we introduced before, and we save it as a <font style=\"background: lightgrey\">\".qasm\"</font> file.\r\n```python\r\n# Create a simple circuit\r\nqc = QuantumCircuit(2, 2)\r\nqc.h(0)\r\nqc.cx(0, 1)\r\nqc.measure([0, 1], [0, 1])\r\n\r\n\r\n# Save the circuit to a QASM file\r\nqasm_filename = \"myfile.qasm\"\r\nqiskit.qasm2.dump(qc, qasm_filename)\r\n```\r\n# Then, we use <font style=\"background: lightgrey\">qiskit.qasm2.load()</font> to load the circuit from the file we created.\r\n```python\r\n# Load the QASM file\r\ncircuit = qiskit.qasm2.load(qasm_filename)\r\n```\r\n# You can check the image of generated circuit in the \"Image Output for File\" node."
    },
    {
        "id": "5aeccdd35cc6eee5",
        "type": "image",
        "z": "ceb7d8abcacad129",
        "name": "Image Output for File",
        "width": "360",
        "data": "payload.result.result_image",
        "dataType": "msg",
        "thumbnail": false,
        "active": true,
        "pass": false,
        "outputs": 0,
        "x": 1680,
        "y": 500,
        "wires": [],
        "info": "# The image of the circuit generated from QASM file."
    },
    {
        "id": "586b51974018e9c7",
        "type": "link-OpenQASM2-to-Qiskit",
        "z": "ceb7d8abcacad129",
        "name": "Link OpenQASM2 gate to Qiskit gate",
        "x": 810,
        "y": 1160,
        "wires": [
            [
                "4a82168103d81a5f",
                "5fa3896f5fbbfa38",
                "469565fb5ca2b35c"
            ]
        ],
        "info": "# By default, Qiskit's OpenQASM 2 importer treats the include file <font style=\"background: lightgrey\">\"qelib1.inc\"</font> as a _de facto_ standard library. The importer treats this file as containing precisely the gates it is described to contain in [the original paper defining OpenQASM 2](https://arxiv.org/abs/1707.03429). Qiskit will use the built-in gates in the [<font style=\"background: lightgrey\">circuit library</font>](https://docs.quantum.ibm.com/api/qiskit/circuit_library) to represent the gates in \"qelib1.inc\". Gates defined in the program by manual OpenQASM 2 <font style=\"background: lightgrey\">gate</font> statements will, by default, be constructed as custom [Qiskit <font style=\"background: lightgrey\">Gate</font> subclasses](https://docs.quantum.ibm.com/api/qiskit/qiskit.circuit.Gate).\r\n&nbsp;\r\n# You can tell the importer to use specific  <font style=\"background: lightgrey\">Gate</font> classes for the given  <font style=\"background: lightgrey\">gate</font> statements it encounters. You can also use this mechanism to treat additional gate names as \"built-in\", that is, not requiring an explicit definition. If you specify which gate classes to use for  <font style=\"background: lightgrey\">gate</font> statements outside of \"qelib1.inc\", the resulting circuit will typically be more efficient to work with.\r\n&nbsp;\r\n# To pass information about a custom instruction to the OpenQASM 2 importer, use the [<font style=\"background: lightgrey\">qasm2.CustomInstruction</font>](https://docs.quantum.ibm.com/api/qiskit/qasm2#qiskit.qasm2.CustomInstruction) class. This has four required pieces of information, in order:\r\n- # The **name** of the gate, used in the OpenQASM 2 program\r\n- # The **number of angle parameters** that the gate takes\r\n- # The **number of qubits** that the gate acts on\r\n- # The Python **constructor** class or function for the gate, which takes the gate parameters (but not qubits) as individual arguments\r\n&nbsp;\r\n# If the importer encounters a <font style=\"background: lightgrey\">gate</font> definition that matches a given custom instruction, it will use that custom information to reconstruct the gate object. If a <font style=\"background: lightgrey\">gate</font> statement is encountered that matches the name of a custom instruction, but does not match both the number of parameters and the number of qubits, the importer will raise a [QASM2ParseError](https://docs.quantum.ibm.com/api/qiskit/qasm2#qasm2parseerror), to indicate the mismatch between the supplied information and program.\r\n&nbsp;\r\n# In addition, a fifth argument <font style=\"background: lightgrey\">builtin</font> can be optionally set to _True_ to make the <font style=\"background: lightgrey\">gate</font> automatically available within the OpenQASM 2 program, even if it is not explicitly defined. If the importer does encounter an explicit <font style=\"background: lightgrey\">gate</font> definition for a built-in custom instruction, it will accept it silently. As before, if an explicit definition of the same name is not compatible with the provided custom instruction, a [QASM2ParseError](https://docs.quantum.ibm.com/api/qiskit/qasm2#qasm2parseerror) will be raised. This is useful for compatibility with older OpenQASM 2 exporters, and with certain other quantum platforms that treat the \"basis gates\" of their hardware as built-in instructions.\r\n&nbsp;\r\n# Qiskit provides a data attribute for working with OpenQASM 2 programs produced by legacy versions of Qiskit's OpenQASM 2 exporting capabilities. This is [qasm2.LEGACY_CUSTOM_INSTRUCTIONS](https://docs.quantum.ibm.com/api/qiskit/qasm2#legacy-compatibility), which can be given as the custom_instructions argument to <font style=\"background: lightgrey\">qasm2.load()</font> and <font style=\"background: lightgrey\">qasm2.loads()</font>.\r\n&nbsp;\r\n# **Note:** As of Qiskit SDK 1.0, Qiskit's OpenQASM 2 exporter still behaves as if \"qelib1.inc\" has more gates than it really does. This means that the default settings of the importer might not be able to import a program exported by our importer. This discrepancy is legacy behavior of Qiskit, and it will be resolved in a later release of Qiskit."
    },
    {
        "id": "4a82168103d81a5f",
        "type": "link-openQASM2-by-qiskit-legacy-exporter",
        "z": "ceb7d8abcacad129",
        "name": "Import a program created by Qiskit's legacy exporter",
        "x": 1300,
        "y": 840,
        "wires": [
            [
                "1e4760d08afa6027",
                "9742a169e54fcb84"
            ]
        ],
        "info": "# **Example: import a program created by Qiskit's legacy exporter**\r\n&nbsp;\r\n# This OpenQASM 2 program uses gates that are not in the original version of <font style=\"background: lightgrey\">\"qelib1.inc\"</font> without declaring them, but are standard gates in Qiskit's library. You can use [<font style=\"background: lightgrey\">qasm2.LEGACY_CUSTOM_INSTRUCTIONS</font>](https://docs.quantum.ibm.com/api/qiskit/qasm2#legacy-compatibility) to easily tell the importer to use the same set of gates that Qiskit's OpenQASM 2 exporter previously used.\r\n&nbsp;\r\n# This code snippet code defines an OpenQASM 2.0 program that creates a quantum circuit with 4 qubits and 4 classical bits, applies a Hadamard gate, a CNOT gate, an RXX gate, and measures the qubits.\r\n```python\r\nprogram = \"\"\"\r\n    OPENQASM 2.0;\r\n    include \"qelib1.inc\";\r\n \r\n    qreg q[4];\r\n    creg c[4];\r\n \r\n    h q[0];\r\n    cx q[0], q[1];\r\n \r\n    // 'rxx' is not actually in `qelib1.inc`,\r\n    // but Qiskit used to behave as if it were.\r\n    rxx(0.75) q[2], q[3];\r\n \r\n    measure q -> c;\r\n\"\"\"\r\n```\r\n# Note that the RXX gate is actually not in standard libraries, but the Qiskit will behave as if it were.\r\n&nbsp;\r\n# Then, we use the following code to construct a qiskit quantum circuit for the program and link OpenQASM2 instructions to Qiskit instructions.\r\n```python\r\ncircuit = qasm2.loads(\r\n    program,\r\n    custom_instructions=qasm2.LEGACY_CUSTOM_INSTRUCTIONS,\r\n)\r\n```\r\n# You can check the image of constructed circuit in the \"Image Output for Legacy Exporter\" node. The qiskit instructions is sent to \"Instruction-Legacy exporter\" and you can see them in the debug palette."
    },
    {
        "id": "1e4760d08afa6027",
        "type": "image",
        "z": "ceb7d8abcacad129",
        "name": "Image Output for Legacy Exporter",
        "width": "360",
        "data": "payload.result.result_image",
        "dataType": "msg",
        "thumbnail": false,
        "active": true,
        "pass": false,
        "outputs": 0,
        "x": 1700,
        "y": 880,
        "wires": [],
        "info": "# The image output for legacy exporter example"
    },
    {
        "id": "9742a169e54fcb84",
        "type": "debug",
        "z": "ceb7d8abcacad129",
        "name": "Instruction-Legacy exporter",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.result.result_instructions",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1680,
        "y": 840,
        "wires": []
    },
    {
        "id": "5fa3896f5fbbfa38",
        "type": "link-openQASM2-by-gate-class",
        "z": "ceb7d8abcacad129",
        "name": "Use a particular gate when import program",
        "x": 1250,
        "y": 1220,
        "wires": [
            [
                "bb187addcb20e923",
                "d3f8927b17e17691"
            ]
        ],
        "info": "# **Example: use a particular gate class when importing an OpenQASM 2 program**\r\n&nbsp;\r\n# Qiskit cannot, in general, verify if the definition in an OpenQASM 2 <font style=\"background: lightgrey\">gate</font> statement corresponds exactly to a Qiskit standard-library gate. Instead, Qiskit chooses a custom gate using the precise definition supplied. This can be less efficient that using one of the built-in standard gates, or a user-defined custom gate. You can manually define <font style=\"background: lightgrey\">gate</font> statements with particular classes.\r\n&nbsp;\r\n# The code snippet below defines a custom gate, 'MyGate', and creates a list of custom instructions to map OpenQASM 2 gate names ('my' and 'rzx') to the 'MyGate' and the built-in gate 'RZXGate'.\r\n```python\r\nfrom qiskit import qasm2\r\nfrom qiskit.circuit import Gate\r\nfrom qiskit.circuit.library import RZXGate\r\n \r\n# Define a custom gate that takes one qubit and two angles.\r\nclass MyGate(Gate):\r\n    def __init__(self, theta, phi):\r\n        super().__init__(\"my\", 1, [theta, phi])\r\n \r\ncustom_instructions = [\r\n    # Link the OpenQASM 2 name 'my' with our custom gate.\r\n    qasm2.CustomInstruction(\"my\", 2, 1, MyGate),\r\n    # Link the OpenQASM 2 name 'rzx' with Qiskit's\r\n    # built-in RZXGate.\r\n    qasm2.CustomInstruction(\"rzx\", 1, 2, RZXGate),\r\n]\r\n```\r\n# Then, It defines an OpenQASM 2.0 program that declares these gates and uses them on a quantum register, and loads the OpenQASM program into a Qiskit QuantumCircuit instance by <font style=\"background: lightgrey\">qiskit.qasm2.loads()</font>, utilizing the custom instructions.\r\n```python\r\nprogram = \"\"\"\r\n    OPENQASM 2.0;\r\n \r\n    gate my(theta, phi) q {\r\n        U(theta / 2, phi, -theta / 2) q;\r\n    }\r\n    gate rzx(theta) a, b {\r\n        // It doesn't matter what definition is\r\n        // supplied, if the parameters match;\r\n        // Qiskit will still use `RZXGate`.\r\n    }\r\n \r\n    qreg q[2];\r\n    my(0.25, 0.125) q[0];\r\n    rzx(pi) q[0], q[1];\r\n\"\"\"\r\n \r\ncircuit = qasm2.loads(\r\n    program,\r\n    custom_instructions=custom_instructions,\r\n)\r\n```\r\n# You can check the image of constructed circuit in the \"Image Output for Partigular Gate Class\" node. The qiskit instructions is sent to \"Instruction-Particular gate class\" and you can see them in the debug palette."
    },
    {
        "id": "bb187addcb20e923",
        "type": "debug",
        "z": "ceb7d8abcacad129",
        "name": "Instruction-Particular gate class",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.result.result_instructions",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1670,
        "y": 1220,
        "wires": []
    },
    {
        "id": "d3f8927b17e17691",
        "type": "image",
        "z": "ceb7d8abcacad129",
        "name": "Image Output for Partigular Gate Class",
        "width": "360",
        "data": "payload.result.result_image",
        "dataType": "msg",
        "thumbnail": false,
        "active": true,
        "pass": false,
        "outputs": 0,
        "x": 1690,
        "y": 1260,
        "wires": [],
        "info": "The image output for particular gate class example"
    },
    {
        "id": "469565fb5ca2b35c",
        "type": "link-define-new-built-in-gate",
        "z": "ceb7d8abcacad129",
        "name": "Define new built-in gate in OpenQASM 2",
        "x": 1260,
        "y": 1580,
        "wires": [
            [
                "aa55bea6f0b28b30",
                "df3218e96e8d8718"
            ]
        ],
        "info": "# **Example: define a new built-in gate in an OpenQASM 2 program**\r\n&nbsp;\r\n# If the argument <font style=\"background: lightgrey\">builtin=True</font> is set, a custom gate does not need to have an associated definition.\r\n&nbsp;\r\n# Consider following code snippet:\r\n```python\r\n# Define a custom gate that takes one qubit and two angles.\r\nclass MyGate(Gate):\r\n    def __init__(self, theta, phi):\r\n        super().__init__(\"my\", 1, [theta, phi])\r\n \r\ncustom_instructions = [\r\n    qasm2.CustomInstruction(\"my\", 2, 1, MyGate, builtin=True),\r\n]\r\n```\r\n# In this code, we define a custom gate, 'MyGate', and creates a custom instruction to map OpenQASM 2 gate names 'my' to 'MyGate'.\r\n&nbsp;\r\n# However, since we set <font style=\"background: lightgrey\">builtin=True</font>, we don't have to define gate 'my' in OpenQASM2 program(like what we did in the 'particular gate class example'). Instead, we can just simply call 'my' gate in the OpenQASM2 program.\r\n```python\r\nprogram = \"\"\"\r\n    OPENQASM 2.0;\r\n    qreg q[1];\r\n \r\n    my(0.25, 0.125) q[0];\r\n\"\"\"\r\n \r\ncircuit = qasm2.loads(\r\n    program,\r\n    custom_instructions=custom_instructions,\r\n)\r\n```\r\n# You can check the image of constructed circuit in the \"Image Output for New Built-in Gate\" node. The qiskit instructions is sent to \"Instruction-new built-in gate\" and you can see them in the debug palette."
    },
    {
        "id": "df3218e96e8d8718",
        "type": "debug",
        "z": "ceb7d8abcacad129",
        "name": "Instruction-new built-in gate",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.result.result_instructions",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1660,
        "y": 1580,
        "wires": []
    },
    {
        "id": "aa55bea6f0b28b30",
        "type": "image",
        "z": "ceb7d8abcacad129",
        "name": "Image Output for New Built-in Gate",
        "width": "360",
        "data": "payload.result.result_image",
        "dataType": "msg",
        "thumbnail": false,
        "active": true,
        "pass": false,
        "outputs": 0,
        "x": 1680,
        "y": 1620,
        "wires": [],
        "info": "# The image output for new built-in gate example"
    },
    {
        "id": "95c4ba39b0d2ece1",
        "type": "define-custom-classical-function",
        "z": "ceb7d8abcacad129",
        "name": "Define custom classical functions in OpenQASM 2",
        "x": 850,
        "y": 1880,
        "wires": [
            [
                "2c8bfbaf8931dc79"
            ]
        ],
        "info": "# OpenQASM 2 includes some built-in classical functions to use in gate arguments. You can extend the language with more functions by using the <font style=\"background: lightgrey\">custom_classical</font> argument to <font style=\"background: lightgrey\">qasm2.load()</font> and <font style=\"background: lightgrey\">qasm2.loads()</font>, with the [<font style=\"background: lightgrey\">qasm2.CustomClassical</font>](https://docs.quantum.ibm.com/api/qiskit/qasm2#qiskit.qasm2.CustomClassical) class.\r\n&nbsp;\r\n# To define a custom classical function, you must supply:\r\n- # The name of the function as it appears in the OpenQASM 2 program\r\n- # The number of floating-point arguments it accepts\r\n- # A callable Python object that evaluates the function\r\n# All defined custom classical functions are treated as built-in to the OpenQASM 2 language by the importer. There is no official way within the OpenQASM 2 language to define new functions; this is a Qiskit extension."
    },
    {
        "id": "2c8bfbaf8931dc79",
        "type": "define-use-custom-classical-instruction",
        "z": "ceb7d8abcacad129",
        "name": "Use custom classical instructions",
        "x": 1240,
        "y": 1880,
        "wires": [
            [
                "5b1b241596aac01c"
            ]
        ],
        "info": "# **Example: use custom classical instructions**\r\n&nbsp;\r\n# Here we provide two custom classical functions. The first is simple, and just adds one to its input. The second is the function <font style=\"background: lightgrey\">math.atan2</font>, which represents the mathematical operation arctan(y/x) in a quadrant-aware manner. Then, we define a list 'customs' containing instances of custom classical operations.\r\n```python\r\ndef add_one(x):\r\n    return x + 1\r\n \r\ncustoms = [\r\n    # Our `add_one` takes only one parameter.\r\n    qasm2.CustomClassical(\"add_one\", 1, add_one),\r\n    # `arctan` takes two parameters, and `math.atan2` implements it.\r\n    qasm2.CustomClassical(\"arctan\", 2, math.atan2),\r\n]\r\n```\r\n# Next, we can simply call these two instructions in the OpenQASM 2 program with the name we defined in the list, and construct circuit with the list 'customs'.\r\n```python\r\nprogram = '''\r\n    include \"qelib1.inc\";\r\n    qreg q[2];\r\n    rx(arctan(pi, 3 + add_one(0.2))) q[0];\r\n    cx q[0], q[1];\r\n'''\r\n\r\ncircuit = qasm2.loads(program, custom_classical=customs)\r\n``` \r\n# You can check the image of constructed circuit in the \"Image Output for Custom Classical Instructions\" node.\r\n"
    },
    {
        "id": "5b1b241596aac01c",
        "type": "image",
        "z": "ceb7d8abcacad129",
        "name": "Image Output for Custom Classical Instructions",
        "width": "360",
        "data": "payload.result.result_image",
        "dataType": "msg",
        "thumbnail": false,
        "active": true,
        "pass": false,
        "outputs": 0,
        "x": 1700,
        "y": 1880,
        "wires": [],
        "info": "The image output for custom classical instructions example"
    },
    {
        "id": "c21db9b211a5ab96",
        "type": "openQASM2-strict-mode",
        "z": "ceb7d8abcacad129",
        "name": "Strict mode",
        "x": 730,
        "y": 2160,
        "wires": [],
        "info": "# By default, this parser is more relaxed than the official specification. It allows trailing commas in parameter lists; unnecessary (empty-statement) semicolons; omission of the <font style=\"background: lightgrey\">OPENQASM 2.0</font>; version statement; and several other quality-of-life improvements without emitting any errors. However, you can use the \"letter-of-the-spec\" mode with <font style=\"background: lightgrey\">strict=True</font>."
    }
]