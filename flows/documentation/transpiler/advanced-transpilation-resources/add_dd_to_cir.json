[
    {
        "id": "c113ec12a779695f",
        "type": "tab",
        "label": "Add dynamical decoupling to circuit",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1946a7852dc12517",
        "type": "get-backend-operations",
        "z": "c113ec12a779695f",
        "name": "Get Backend Operations Name",
        "token": "",
        "x": 1030,
        "y": 600,
        "wires": [
            [
                "942c351077155e57",
                "9e055c3f1af9b936"
            ]
        ],
        "info": "# This example uses <font style=\"background: lightgrey\">ibm_brisbane</font>, which is a quantum simulator backend provided by IBM Quantum for running and testing quantum algorithms without accessing real quantum hardware. Before adding dynamical decoupling sequence to the circuit, you need to get the <font style=\"background: lightgrey\">target</font> information from the <font style=\"background: lightgrey\">backend</font> and save it, because the <font style=\"background: lightgrey\">target</font> will need to be modified to add timing information for the gates used in dynamical decoupling.\r\n&nbsp;\r\n# In the code snippet below, we created a <font style=\"background: lightgrey\">QiskitRuntimeService</font> instance to get the backend <font style=\"background: lightgrey\">\"ibm_brisbane\"</font>. Then, we get the <font style=\"background: lightgrey\">target</font> information from the backend and save the operation names as <font style=\"background: lightgrey\">basis_gates</font>.\r\n```python\r\nfrom qiskit_ibm_runtime import QiskitRuntimeService\r\n \r\nservice = QiskitRuntimeService(channel = \"ibm_quantum\", token = \"Your-IBM-API-token\")\r\nbackend = service.backend(\"ibm_brisbane\")\r\n \r\ntarget = backend.target\r\nbasis_gates = list(target.operation_names)\r\n```\r\n&nbsp;\r\n# **Note:** When you create a <font style=\"background: lightgrey\">QiskitRuntimwService</font> instance, you have to replace _token_ argument with your **IBM Quantum API key**, which you can find in [IBM Quantum account page](https://quantum.ibm.com/account).\r\n&nbsp;\r\n# The operation names of <font style=\"background: lightgrey\">target</font> are sent to \"Target Operation Names\" node and you can check them in debug palette."
    },
    {
        "id": "31d5a219b32d0ded",
        "type": "inject",
        "z": "c113ec12a779695f",
        "name": "Start",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 270,
        "y": 600,
        "wires": [
            [
                "8aca5115c42b5476"
            ]
        ],
        "info": "# **In this flow, we will show you how to add dynamical decoupling to the circuit.**"
    },
    {
        "id": "942c351077155e57",
        "type": "debug",
        "z": "c113ec12a779695f",
        "name": "Target Operation Names",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.result.result_operations",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 640,
        "wires": [],
        "info": "# List the operation names of target backend."
    },
    {
        "id": "9e055c3f1af9b936",
        "type": "create-and-optimize-quantum-circuit",
        "z": "c113ec12a779695f",
        "name": "Create and Optimize a quantum circuit",
        "x": 1590,
        "y": 600,
        "wires": [
            [
                "7bf08573c5db2b58",
                "1cb0b801ef8217d2"
            ]
        ],
        "info": "# First, you need to create a circuit, and transpile the circuit to the backend because dynamical decoupling pulses need to be added after the circuit has been transpiled and scheduled.\r\n&nbsp;\r\n# Dynamical decoupling often works best when there is a lot of idle time in the quantum circuits - that is, there are qubits that are not being used while others are active. \r\n&nbsp;\r\n# In this example, we create a <font style=\"background: lightgrey\">EfficientSU2</font> circuit and transpile it by following code. This ansatz has lots of idle time because it applies two-qubit <font style=\"background: lightgrey\">ecr</font> gates sequentially. \r\n```python\r\nfrom qiskit.transpiler.preset_passmanagers import generate_preset_pass_manager\r\nfrom qiskit.circuit.library import EfficientSU2\r\n \r\nqc = EfficientSU2(12, entanglement=\"circular\", reps=1)\r\npm = generate_preset_pass_manager(1, target=target, seed_transpiler=12345)\r\nqc_t = pm.run(qc)\r\n```\r\n&nbsp;\r\n# You can check the image of this circuit in \"EfficientSU2 Image\" node."
    },
    {
        "id": "7bf08573c5db2b58",
        "type": "image",
        "z": "c113ec12a779695f",
        "name": "EfficientSU2 Image",
        "width": "1380",
        "data": "payload.result.result_image",
        "dataType": "msg",
        "thumbnail": true,
        "active": true,
        "pass": false,
        "outputs": 0,
        "x": 1930,
        "y": 180,
        "wires": []
    },
    {
        "id": "1cb0b801ef8217d2",
        "type": "create-custom-pass-for-dd",
        "z": "c113ec12a779695f",
        "name": "Create Custom Passes for Dynamical Decoupling",
        "x": 2070,
        "y": 600,
        "wires": [
            [
                "713e83a31a166b19",
                "bb079e8bbe4a7561"
            ]
        ],
        "info": "# A _dynamical decoupling sequence_ is a series of gates that compose to the identity and are spaced regularly in time. For example, in this code snippet, we start by creating a simple sequence called XY4 consisting of four gates.\r\n```python\r\nfrom qiskit.circuit.library import XGate, YGate\r\n \r\nX = XGate()\r\nY = YGate()\r\n \r\ndd_sequence = [X, Y, X, Y]\r\n```\r\n# Then, because of the regular timing of dynamical decoupling sequences, information about the <font style=\"background: lightgrey\">YGate</font> must be added to the <font style=\"background: lightgrey\">target</font> because it is not a basis gate, whereas the <font style=\"background: lightgrey\">XGate</font> is. We know a _priori_ that the <font style=\"background: lightgrey\">YGate</font> has the same duration and error as the <font style=\"background: lightgrey\">XGate</font>, however, so we can just retrieve those properties from the <font style=\"background: lightgrey\">target</font> and add them back for the <font style=\"background: lightgrey\">YGates</font>. This is also why the list 'basis_gates' were saved separately in the previous node, since we are adding the <font style=\"background: lightgrey\">YGate</font> instruction to the <font style=\"background: lightgrey\">target</font> although it is not an actual basis gate of <font style=\"background: lightgrey\">ibm_brisbane</font>.\r\n&nbsp;\r\n# In this code, we copy the duration and error properties of the <font style=\"background: lightgrey\">X gate</font> to the <font style=\"background: lightgrey\">Y gate</font> for each qubit in the target quantum device and then adds the <font style=\"background: lightgrey\">Y gate</font> with these properties to the <font style=\"background: lightgrey\">target</font>.\r\n```python\r\nfrom qiskit.transpiler import InstructionProperties\r\n \r\ny_gate_properties = {}\r\nfor qubit in range(target.num_qubits):\r\n    y_gate_properties.update(\r\n        {\r\n            (qubit,): InstructionProperties(\r\n                duration=target[\"x\"][(qubit,)].duration,\r\n                error=target[\"x\"][(qubit,)].error,\r\n            )\r\n        }\r\n    )\r\n \r\ntarget.add_instruction(YGate(), y_gate_properties)\r\n```\r\n# The new operation name list is set to \"New Target Operation Names\" node, and you can check the instruction names in debug palette. Compare to the previous instructions, Compared to the previous instructions, the <font style=\"background: lightgrey\">target</font> should now include an additional instruction called <font style=\"background: lightgrey\">'y'</font>, while all other instructions should remain the same as before. "
    },
    {
        "id": "713e83a31a166b19",
        "type": "debug",
        "z": "c113ec12a779695f",
        "name": "New Target Operation Names",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.result.result_instructions",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2090,
        "y": 640,
        "wires": []
    },
    {
        "id": "bb079e8bbe4a7561",
        "type": "execute-custom-pass-for-dd",
        "z": "c113ec12a779695f",
        "name": "Execute Custom Passes for Dynamical Decoupling",
        "x": 2630,
        "y": 600,
        "wires": [
            [
                "c33c4d1d616a524e",
                "0ea2fb7d70487f7a"
            ]
        ],
        "info": "# Next step, execute the custom passes.  Instantiate the <font style=\"background: lightgrey\">PassManager</font> with <font style=\"background: lightgrey\">ALAPScheduleAnalysis</font> and <font style=\"background: lightgrey\">PadDynamicalDecoupling</font> first. <font style=\"background: lightgrey\">ALAPScheduleAnalysis</font> optimizes by scheduling operations as late as possible. <font style=\"background: lightgrey\">PadDynamicalDecoupling</font> likely optimizes by adding instructions to manage dynamic behavior effectively. You need to run <font style=\"background: lightgrey\">ALAPScheduleAnalysis</font> first to add timing information about the quantum circuit before the regularly-spaced dynamical decoupling sequences can be added. These passes are run on the circuit with <font style=\"background: lightgrey\">.run()</font>.\r\n&nbsp;\r\n# **Note:** Ansatz circuits such as <font style=\"background: lightgrey\">EfficientSU2</font> are parameterized, so they must have value bound to them before being sent to the backend. Here, we assign it with random parameters, and run it by <font style=\"background: lightgrey\">PassManager</font>.\r\n```python\r\nimport numpy as np\r\n \r\nrng = np.random.default_rng(1234)\r\nqc_t.assign_parameters(rng.uniform(-np.pi, np.pi, qc_t.num_parameters), inplace=True)\r\n```\r\n```python\r\nfrom qiskit.transpiler import PassManager\r\nfrom qiskit.transpiler.passes.scheduling import (\r\n    ALAPScheduleAnalysis,\r\n    PadDynamicalDecoupling,\r\n)\r\n \r\ndd_pm = PassManager(\r\n    [\r\n        ALAPScheduleAnalysis(target=target),\r\n        PadDynamicalDecoupling(target=target, dd_sequence=dd_sequence),\r\n    ]\r\n)\r\nqc_dd = dd_pm.run(qc_t)\r\n```\r\n# You can use the visualization tool [<font style=\"background: lightgrey\">timeline_drawer</font>](https://docs.quantum.ibm.com/api/qiskit/qiskit.visualization.timeline_drawer) to see the circuit's timing and confirm that a regularly-spaced sequence of <font style=\"background: lightgrey\">XGates</font> and <font style=\"background: lightgrey\">YGates</font> appear in the circuit.\r\n```python\r\nfrom qiskit.visualization import timeline_drawer\r\n \r\ntimeline_drawer(qc_dd, show_idle=False)\r\n```\r\n# You can check the image of circuit's timing in the \"Circuit Timing Output\" node."
    },
    {
        "id": "c33c4d1d616a524e",
        "type": "image",
        "z": "c113ec12a779695f",
        "name": "Circuit Timing Output",
        "width": "960",
        "data": "payload.result.result_image",
        "dataType": "msg",
        "thumbnail": true,
        "active": true,
        "pass": false,
        "outputs": 0,
        "x": 2980,
        "y": 840,
        "wires": []
    },
    {
        "id": "0ea2fb7d70487f7a",
        "type": "decompose-circuit-into-basis-gate",
        "z": "c113ec12a779695f",
        "name": "Decompose Custom Circuit into Basis Gates",
        "x": 3230,
        "y": 600,
        "wires": [
            [
                "7e90d45c2c1433e1"
            ]
        ],
        "info": "# Lastly, because the <font style=\"background: lightgrey\">YGate</font> is not an actual basis gate of our backend, you need to manually apply the <font style=\"background: lightgrey\">BasisTranslator</font> pass (this is a default pass, but it is executed before scheduling, so it needs to be applied again). The session equivalence library is a library of circuit equivalences that allows the transpiler to decompose circuits into basis gates, as also specified as an argument.\r\n```python\r\nfrom qiskit.circuit.equivalence_library import SessionEquivalenceLibrary as sel\r\nfrom qiskit.transpiler.passes import BasisTranslator\r\n \r\nqc_dd = BasisTranslator(sel, basis_gates)(qc_dd)\r\nqc_dd.draw(\"mpl\", fold=-1, idle_wires=False)\r\n```\r\n# Now, you can check the image of the circuit added with dynamical decoupling sequence in the \"New EfficientSU2 Image\" node. You can see that <font style=\"background: lightgrey\">YGates</font> are absent from our circuit, and there is explicit timing information in the form of <font style=\"background: lightgrey\">Delay</font> gates."
    },
    {
        "id": "7e90d45c2c1433e1",
        "type": "image",
        "z": "c113ec12a779695f",
        "name": "New EfficientSU2 Image",
        "width": "1380",
        "data": "payload.result.result_image",
        "dataType": "msg",
        "thumbnail": true,
        "active": true,
        "pass": false,
        "outputs": 0,
        "x": 3650,
        "y": 600,
        "wires": []
    },
    {
        "id": "8aca5115c42b5476",
        "type": "add-dynamical-decoupling-to-circuit",
        "z": "c113ec12a779695f",
        "name": "Introduction of Adding dynamical decoupling",
        "x": 610,
        "y": 600,
        "wires": [
            [
                "1946a7852dc12517"
            ]
        ],
        "info": "# This flow demonstrates how to use the [<font style=\"background: lightgrey\">PadDynamicalDecoupling</font>](https://docs.quantum.ibm.com/api/qiskit/qiskit.transpiler.passes.PadDynamicalDecoupling) pass to add an error suppression technique called **dynamical decoupling** to the circuit.\r\n&nbsp;\r\n# Dynamical decoupling works by adding pulse sequences (known as _dynamical decoupling sequences_) to idle qubits to flip them around the Bloch sphere, which cancels the effect of noise channels, thereby suppressing decoherence. These pulse sequences are similar to refocusing pulses used in nuclear magnetic resonance. For a full description, see [A Quantum Engineer's Guide to Superconducting Qubits](https://arxiv.org/abs/1904.06560).\r\n&nbsp;\r\n# Because the <font style=\"background: lightgrey\">PadDynamicalDecoupling</font> pass only operates on scheduled circuits and involves gates that are not necessarily basis gates of our target, you will need the [<font style=\"background: lightgrey\">ALAPScheduleAnalysis</font>](https://docs.quantum.ibm.com/api/qiskit/qiskit.transpiler.passes.ALAPScheduleAnalysis) and [<font style=\"background: lightgrey\">BasisTranslator</font>](https://docs.quantum.ibm.com/api/qiskit/qiskit.transpiler.passes.BasisTranslator) passes as well.\r\n"
    }
]