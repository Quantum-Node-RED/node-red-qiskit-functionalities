[
    {
        "id": "1cf38139db7af885",
        "type": "tab",
        "label": "Transpiler stages",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "10622515b013da9a",
        "type": "routing",
        "z": "1cf38139db7af885",
        "name": "Routing Stage",
        "info": "## **Routing Stage**\r\n&nbsp;\r\n# In order to implement a two-qubit gate between qubits that are not directly connected on a quantum device, one or more SWAP gates must be inserted into the circuit to move the qubit states around until they are adjacent on the device gate map. Each SWAP gate represents an expensive and noisy operation to perform. Thus, finding the minimum number of SWAP gates needed to map a circuit onto a given device is an important step in the transpilation process. For efficiency, this stage is typically computed alongside the Layout stage by default, but they are logically distinct from one another. The Layout stage selects the hardware qubits to be used, while the Routing stage inserts the appropriate amount of SWAP gates in order to execute the circuits using the selected layout.\r\n&nbsp;\r\n# However, finding the optimal SWAP mapping is hard. In fact, it is an NP-hard problem, and is thus prohibitively expensive to compute for all but the smallest quantum devices and input circuits. To work around this, Qiskit uses a stochastic heuristic algorithm called <font style=\"background: lightgrey\">SabreSwap</font> to compute a good, but not necessarily optimal, SWAP mapping. The use of a stochastic method means that the circuits generated are not guaranteed to be the same over repeated runs. Indeed, running the same circuit repeatedly results in a distribution of circuit depths and gate counts at the output. It is for this reason that many users choose to run the routing function (or the entire <font style=\"background: lightgrey\">StagedPassManager</font>) many times and select the lowest-depth circuits from the distribution of outputs.\r\n&nbsp;\r\n# For example, let's take a 15-qubit GHZ circuit executed 100 times, using a “bad” (disconnected) <font style=\"background: lightgrey\">initial_layout</font>. The following code snippet creates a 15-qubit GHZ state quantum circuit using Qiskit and simulates it on a fake quantum backend (FakeAuckland). It then uses a preset pass manager to optimize the circuit with a specified optimization level and layout method. The code runs the circuit 100 times, recording the circuit depths after optimization.\r\n```python\r\nimport matplotlib.pyplot as plt\r\nfrom qiskit import QuantumCircuit\r\nfrom qiskit_ibm_runtime.fake_provider import FakeAuckland, FakeWashingtonV2\r\nfrom qiskit.transpiler.preset_passmanagers import generate_preset_pass_manager\r\n \r\nbackend = FakeAuckland()\r\n \r\nghz = QuantumCircuit(15)\r\nghz.h(0)\r\nghz.cx(0, range(1, 15))\r\n \r\npass_manager = generate_preset_pass_manager(\r\n    optimization_level=1,\r\n    backend=backend,\r\n    layout_method=\"trivial\",  # Fixed layout mapped in circuit order\r\n)\r\ndepths = []\r\nfor _ in range(100):\r\n    depths.append(pass_manager.run(ghz).depth())\r\n \r\nplt.figure(figsize=(8, 6))\r\nplt.hist(depths, align=\"left\", color=\"#AC557C\")\r\nplt.xlabel(\"Depth\", fontsize=14)\r\nplt.ylabel(\"Counts\", fontsize=14)\r\n```\r\n# You can check the image of the distribution in the \"Distribution Output\" node.\r\n&nbsp;\r\n# This wide distribution demonstrates how difficult it is for the SWAP mapper to compute the best mapping. To gain some insight, let's look at both the circuit being executed as well as the qubits that were chosen on the hardware.\r\n```python\r\nghz.draw('mpl', idle_wires=False)\r\n```\r\n# You can check the image of circuit `ghz` in the \"Circuit Diagram Output\" node.\r\n&nbsp;\r\n# The following code snippet  is using Qiskit to visualize the layout of a quantum circuit on a specific quantum hardware backend. After the circuit (`ghz`) is transpiled using a pass manager (`pass_manager`), the `plot_circuit_layout` function is called to display the hardware graph and highlight which qubits on the hardware were selected to execute the circuit.\r\n```python\r\nfrom qiskit.visualization import plot_circuit_layout\r\n \r\n# Plot the hardware graph and indicate which hardware qubits were chosen to run the circuit\r\ntranspiled_circ = pass_manager.run(ghz)\r\nplot_circuit_layout(transpiled_circ, backend)\r\n```\r\n# You can check the image of the hardware graph in the \"Circuit on hardware Output\" node.\r\n&nbsp;\r\n# As you can see, this circuit has to execute a two-qubit gate between qubits 0 and 14, which are very far apart on the connectivity graph. Running this circuit thus requires inserting SWAP gates to execute all of the two-qubit gates using the <font style=\"background: lightgrey\">SabreSwap</font> pass.\r\n&nbsp;\r\n# Note also that the <font style=\"background: lightgrey\">SabreSwap</font> algorithm is different from the larger <font style=\"background: lightgrey\">SabreLayout</font> method in the previous stage. By default, <font style=\"background: lightgrey\">SabreLayout</font> runs both layout and routing, and returns the transformed circuit. This is done for a few particular technical reasons specified in the pass's [API reference page](https://docs.quantum.ibm.com/api/qiskit/qiskit.transpiler.passes.SabreLayout).\r\n\r\n***\r\n&nbsp;\r\n## **Node Output:**\r\n- # Object: `backend` (Type: _qiskit.providers.Backend_)\r\n- # Image: The image of distribution in 100 times optimizations\r\n- # Image: The image of circuit `ghz`\r\n- # Image: The image of circuit on hardware graph.",
        "x": 1460,
        "y": 360,
        "wires": [
            [
                "293837f931d673a0",
                "982d6a2837848b15",
                "2440a24c6e527bac",
                "87f7f61b262db90b"
            ]
        ]
    },
    {
        "id": "b7ad39e8ecefbeeb",
        "type": "inject",
        "z": "1cf38139db7af885",
        "name": "Start",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 360,
        "wires": [
            [
                "666b3e8da298399c"
            ]
        ]
    },
    {
        "id": "293837f931d673a0",
        "type": "image",
        "z": "1cf38139db7af885",
        "name": "Distribution Output",
        "width": "500",
        "data": "payload.result.layout_image",
        "dataType": "msg",
        "thumbnail": false,
        "active": true,
        "pass": false,
        "outputs": 0,
        "x": 1710,
        "y": 540,
        "wires": []
    },
    {
        "id": "982d6a2837848b15",
        "type": "image",
        "z": "1cf38139db7af885",
        "name": "Circuit Diagram Output",
        "width": "500",
        "data": "payload.result.circuit_image",
        "dataType": "msg",
        "thumbnail": false,
        "active": true,
        "pass": false,
        "outputs": 0,
        "x": 1720,
        "y": 960,
        "wires": []
    },
    {
        "id": "2440a24c6e527bac",
        "type": "image",
        "z": "1cf38139db7af885",
        "name": "Circuit on hardware Output",
        "width": "500",
        "data": "payload.result.qubit_image",
        "dataType": "msg",
        "thumbnail": false,
        "active": true,
        "pass": false,
        "outputs": 0,
        "x": 1740,
        "y": 1460,
        "wires": []
    },
    {
        "id": "1e642d19771ee33b",
        "type": "translation",
        "z": "1cf38139db7af885",
        "name": "Translation Stage",
        "info": "## **Node Input:**\r\n- # Object: `backend` (Type: _qiskit.providers.Backend_)\r\n\r\n***\r\n&nbsp;\r\n## **Translation Stage**\r\n&nbsp;\r\n# When writing a quantum circuit, you are free to use any quantum gate (unitary operation) that you like, along with a collection of non-gate operations such as qubit measurement or reset instructions. However, most quantum devices only natively support a handful of quantum gate and non-gate operations. These native gates are part of the definition of a target's [ISA](https://docs.quantum.ibm.com/guides/transpile#instruction-set-architecture) and this stage of the preset <font style=\"background: lightgrey\">PassManagers</font> translates (or unrolls) the gates specified in a circuit to the native basis gates of a specified backend. This is an important step, as it allows the circuit to be executed by the backend, but typically leads to an increase in the depth and number of gates.\r\n&nbsp;\r\n# Two special cases are especially important to highlight, and help illustrate what this stage does.\r\n# 1.  If a SWAP gate is not a native gate to the target backend, this requires three **CNOT** gates:\r\n```python\r\nprint(\"native gates:\" + str(backend.operation_names))\r\nqc = QuantumCircuit(2)\r\nqc.swap(0, 1)\r\nqc.decompose().draw('mpl')\r\n```\r\n# The operation names of the backend you created in the previous node is sent to \"Native gates Output\" node and you can check them in the debug sidebar. You can see there is no operation called \"swap\". Therefore, if you want to apply \"swap\" operation, you need to replace it with 3 CNOT gates. You can also check the image of decomposed circuit in the \"Decomposed Circuit Diagram\" node.\r\n&nbsp;\r\n# As a product of three CNOT gates, a SWAP is an expensive operation to perform on noisy quantum devices. However, such operations are usually necessary for embedding a circuit into the limited gate connectivities of many devices. Thus, minimizing the number of SWAP gates in a circuit is a primary goal in the transpilation process.\r\n&nbsp;\r\n# 2. A Toffoli, or controlled-controlled-not gate (<font style=\"background: lightgrey\">ccx</font>), is a three-qubit gate. Given that our basis gate set includes only single- and two-qubit gates, this operation must be decomposed. However, it is quite costly:\r\n```python\r\nqc = QuantumCircuit(3)\r\nqc.ccx(0, 1, 2)\r\nqc.decompose().draw('mpl')\r\n```\r\n# You can check the image of decomposed ccx gate in the \"Decomposed Circuit Diagram 2\" node.\r\n&nbsp;\r\n# For every Toffoli gate in a quantum circuit, the hardware may execute up to six CNOT gates and a handful of single-qubit gates. This example demonstrates that any algorithm making use of multiple Toffoli gates will end up as a circuit with large depth and will therefore be appreciably affected by noise.\r\n\r\n***\r\n&nbsp;\r\n## **Node Output:**\r\n- # Object: `backend` (Type: _qiskit.providers.Backend_)\r\n- # String: `native_gates`\r\n- # Image: The image of decomposed SWAP gate\r\n- # Image: The image of decomposed CCX gate",
        "x": 2050,
        "y": 360,
        "wires": [
            [
                "17763e6f9d845e27",
                "f838aa8a1dd09e05",
                "8f22e25079a5de12",
                "75d61f9b48e3f38d"
            ]
        ]
    },
    {
        "id": "17763e6f9d845e27",
        "type": "image",
        "z": "1cf38139db7af885",
        "name": "Decomposed Circuit Diagram",
        "width": "500",
        "data": "payload.result.qubit_circuit_image",
        "dataType": "msg",
        "thumbnail": false,
        "active": true,
        "pass": false,
        "outputs": 0,
        "x": 2320,
        "y": 560,
        "wires": []
    },
    {
        "id": "f838aa8a1dd09e05",
        "type": "image",
        "z": "1cf38139db7af885",
        "name": "Decomposed Circuit Diagram 2",
        "width": "500",
        "data": "payload.result.qubit_circuit_image_2",
        "dataType": "msg",
        "thumbnail": false,
        "active": true,
        "pass": false,
        "outputs": 0,
        "x": 2330,
        "y": 880,
        "wires": []
    },
    {
        "id": "bf4deb5d045311b8",
        "type": "optimization",
        "z": "1cf38139db7af885",
        "name": "Optimization Stage",
        "info": "## **Node Input:**\r\n- # Object: `backend` (Type: _qiskit.providers.Backend_)\r\n\r\n***\r\n&nbsp;\r\n## **Optimization Stage**\r\n# This stage centers around decomposing quantum circuits into the basis gate set of the target device, and must fight against the increased depth from the layout and routing stages. Fortunately, there are many routines for optimizing circuits by either combining or eliminating gates. In some cases, these methods are so effective that the output circuits have lower depth than the inputs, even after layout and routing to the hardware topology. In other cases, not much can be done, and the computation may be difficult to perform on noisy devices. This stage is where the various optimization levels begin to differ.\r\n- # For <font style=\"background: lightgrey\">optimization_level=1</font>, this stage prepares [<font style=\"background: lightgrey\">Optimize1qGatesDecomposition</font>](https://docs.quantum.ibm.com/api/qiskit/qiskit.transpiler.passes.Optimize1qGatesDecomposition) and [<font style=\"background: lightgrey\">CXCancellation</font>](https://docs.quantum.ibm.com/api/qiskit/qiskit.transpiler.passes.CXCancellation), which combine chains of single-qubit gates and cancel any back-to-back CNOT gates.\r\n- # For <font style=\"background: lightgrey\">optimization_level=2</font>, this stage uses the [<font style=\"background: lightgrey\">CommutativeCancellation</font>](https://docs.quantum.ibm.com/api/qiskit/qiskit.transpiler.passes.CommutativeCancellation) pass instead of <font style=\"background: lightgrey\">CXCancellation</font>, which removes redundant gates by exploiting commutation relations.\r\n- # For <font style=\"background: lightgrey\">optimization_level=3</font>, this stage prepares the following passes\r\n    - # [<font style=\"background: lightgrey\">Collect2qBlocks</font>](https://docs.quantum.ibm.com/api/qiskit/qiskit.transpiler.passes.Collect2qBlocks)\r\n    - # [<font style=\"background: lightgrey\">ConsolidateBlocks</font>](https://docs.quantum.ibm.com/api/qiskit/qiskit.transpiler.passes.ConsolidateBlocks)\r\n    - # [<font style=\"background: lightgrey\">UnitarySynthesis</font>](https://docs.quantum.ibm.com/api/qiskit/qiskit.transpiler.passes.UnitarySynthesis)\r\n    - # [<font style=\"background: lightgrey\">Optimize1qGateDecomposition</font>](https://docs.quantum.ibm.com/api/qiskit/qiskit.transpiler.passes.Optimize1qGatesDecomposition)\r\n    - # [<font style=\"background: lightgrey\">CommutativeCancellation</font>](https://docs.quantum.ibm.com/api/qiskit/qiskit.transpiler.passes.CommutativeCancellation)\r\n# Additionally, this stage also executes a few final checks to make sure that all instructions in the circuit are composed of the basis gates available on the target backend.\r\n&nbsp;\r\n# The example below using a GHZ state demonstrates the effects of different optimization level settings on circuit depth and gate count. You can check the image of this GHZ state in the \"15-qubit GHZ state Output\" node.\r\n&nbsp;\r\n# The following code constructs a 15-qubit GHZ state and compares the <font style=\"background: lightgrey\">optimization_levels</font> of transpilation in terms of resulting circuit depth, gate counts, and multi-qubit gate counts.\r\n```python\r\nghz = QuantumCircuit(15)\r\nghz.h(0)\r\nghz.cx(0, range(1, 15))\r\n \r\ndepths = []\r\ngate_counts = []\r\nmultiqubit_gate_counts = []\r\nlevels = [str(x) for x in range(4)]\r\nfor level in range(4):\r\n    pass_manager = generate_preset_pass_manager(\r\n        optimization_level=level,\r\n        backend=backend,\r\n    )\r\n    circ = pass_manager.run(ghz)\r\n    depths.append(circ.depth())\r\n    gate_counts.append(sum(circ.count_ops().values()))\r\n    multiqubit_gate_counts.append(circ.count_ops()[\"cx\"])\r\n \r\nfig, (ax1, ax2) = plt.subplots(2, 1)\r\nax1.bar(levels, depths, label=\"Depth\")\r\nax1.set_xlabel(\"Optimization Level\")\r\nax1.set_ylabel(\"Depth\")\r\nax1.set_title(\"Output Circuit Depth\")\r\nax2.bar(levels, gate_counts, label=\"Number of Circuit Operations\")\r\nax2.bar(levels, multiqubit_gate_counts, label=\"Number of CX gates\")\r\nax2.set_xlabel(\"Optimization Level\")\r\nax2.set_ylabel(\"Number of gates\")\r\nax2.legend()\r\nax2.set_title(\"Number of output circuit gates\")\r\nfig.tight_layout()\r\nplt.show()\r\n```\r\n# You can check the image of the comparison result in the \"Comparision Result Output\" node.\r\n\r\n***\r\n&nbsp;\r\n## **Node Output:**\r\n- # Image: The image of 15-qubit GHZ state\r\n- # Image: The image of comparison result between different optimization levels.\r\n\r\n    ",
        "x": 2530,
        "y": 360,
        "wires": [
            [
                "7410c011cc8435d9",
                "74b39518f95efb87",
                "21ea090845bffdbe"
            ]
        ]
    },
    {
        "id": "7410c011cc8435d9",
        "type": "image",
        "z": "1cf38139db7af885",
        "name": "Comparision Result Outpu",
        "width": "500",
        "data": "payload.result.optimization_image",
        "dataType": "msg",
        "thumbnail": false,
        "active": true,
        "pass": false,
        "outputs": 0,
        "x": 2860,
        "y": 1060,
        "wires": []
    },
    {
        "id": "d130ca65ce791843",
        "type": "scheduling",
        "z": "1cf38139db7af885",
        "name": "Scheduling Stage",
        "info": "## **Scheduling Stage**\r\n&nbsp;\r\n# This last stage is only run if it is explicitly called for (similar to the Init stage) and does not run by default (though a method can be specified by setting the <font style=\"background: lightgrey\">scheduling_method</font> argument when calling <font style=\"background: lightgrey\">generate_preset_pass_manager</font>). The scheduling stage is typically used once the circuit has been translated to the target basis, mapped to the device, and optimized. These passes focus on accounting for all the idle time in a circuit. At a high level, the scheduling pass can be thought of as explicitly inserting delay instructions to account for the idle time between gate executions and to inspect how long the circuit will be running on the backend.\r\n&nbsp;\r\n# Here is an example:\r\n```python\r\nfrom qiskit_ibm_runtime.fake_provider import FakeWashingtonV2\r\nfrom qiskit_ibm_runtime import QiskitRuntimeService\r\nfrom qiskit.transpiler.timing_constraints import TimingConstraints\r\n \r\n \r\nghz = QuantumCircuit(5)\r\nghz.h(0)\r\nghz.cx(0, range(1, 5))\r\n \r\n \r\n# Use fake pulse-enabled backend\r\nbackend = FakeWashingtonV2()\r\n \r\n# Run with optimization level 3 and 'asap' scheduling pass\r\npass_manager = generate_preset_pass_manager(\r\n    optimization_level=3,\r\n    backend=backend,\r\n    timing_constraints=backend.target.timing_constraints(),\r\n    scheduling_method=\"asap\"\r\n)\r\n \r\n \r\ncirc = pass_manager.run(ghz, backend)\r\ncirc.draw(output=\"mpl\", idle_wires=False)\r\n```\r\n# You can check the image of scheduled circuit in the \"Scheduled Circuit Diagram\" node. The transpiler inserted <font style=\"background: lightgrey\">Delay</font> instructions to account for idle time on each qubit.\r\n&nbsp;\r\n# To get a better idea of the timing of the circuit we can also look at it with the <font style=\"background: lightgrey\">timeline.draw()</font> function. You can see the image in the \"Timeline Output\" node.\r\n&nbsp;\r\n# Scheduling a circuit involves two parts: analysis and constraint mapping, followed by a padding pass. The first part requires running a scheduling analysis pass (by default this is [<font style=\"background: lightgrey\">ALAPSchedulingAnalysis</font>](https://docs.quantum.ibm.com/api/qiskit/qiskit.transpiler.passes.ALAPScheduleAnalysis)), which analyzes the circuit and records the start time of each instruction in the circuit into a schedule. Once the circuit has an initial schedule, additional passes can be run to account for any timing constraints on the target backend. Finally, a padding pass such as [<font style=\"background: lightgrey\">PadDelay</font>](https://docs.quantum.ibm.com/api/qiskit/qiskit.transpiler.passes.PadDelay) or [<font style=\"background: lightgrey\">PadDynamicalDecoupling</font>](https://docs.quantum.ibm.com/api/qiskit/qiskit.transpiler.passes.PadDynamicalDecoupling) can be executed.\r\n\r\n***\r\n&nbsp;\r\n## **Node Output:**\r\n- # Image: The image of scheduled circuit `circ`\r\n- # Image: The image of `circ` drawing by timeline.",
        "x": 3130,
        "y": 360,
        "wires": [
            [
                "b7425b67410dd071",
                "6223af02dc5b0705"
            ]
        ]
    },
    {
        "id": "6223af02dc5b0705",
        "type": "image",
        "z": "1cf38139db7af885",
        "name": "Scheduled Circuit Diagram",
        "width": "500",
        "data": "payload.result.circ_image",
        "dataType": "msg",
        "thumbnail": false,
        "active": true,
        "pass": false,
        "outputs": 0,
        "x": 3580,
        "y": 360,
        "wires": []
    },
    {
        "id": "b7425b67410dd071",
        "type": "image",
        "z": "1cf38139db7af885",
        "name": "Timeline Output",
        "width": "640",
        "data": "payload.result.circ_timeline_image",
        "dataType": "msg",
        "thumbnail": false,
        "active": true,
        "pass": false,
        "outputs": 0,
        "x": 3540,
        "y": 600,
        "wires": []
    },
    {
        "id": "666b3e8da298399c",
        "type": "intro-to-transpile-stage",
        "z": "1cf38139db7af885",
        "name": "Introduction to transpiler stages",
        "info": "# This flow describes the stages of prebuilt transpilation pipeline in the Qiskit SDK. There are six stages:\r\n- # <font style=\"background: lightgrey\">init</font>\r\n- # <font style=\"background: lightgrey\">layout</font>\r\n- # <font style=\"background: lightgrey\">routing</font>\r\n- # <font style=\"background: lightgrey\">translation</font>\r\n- # <font style=\"background: lightgrey\">optimization</font>\r\n- # <font style=\"background: lightgrey\">scheduling</font>\r\n# The [<font style=\"background: lightgrey\">generate_preset_pass_manager</font>](https://docs.quantum.ibm.com/api/qiskit/transpiler_preset#qiskit.transpiler.preset_passmanagers.generate_preset_pass_manager) function creates a preset [staged pass manager](https://docs.quantum.ibm.com/api/qiskit/qiskit.transpiler.StagedPassManager) composed of these stages. The specific passes that make up each stage depends on the arguments passed to <font style=\"background: lightgrey\">generate_preset_pass_manager</font>. The <font style=\"background: lightgrey\">optimization_level</font> is a positional argument that must be specified; it is an integer that can be 0, 1, 2, or 3. Higher values indicate heavier but more costly optimization (see [Transpilation defaults and configuration options](https://docs.quantum.ibm.com/guides/defaults-and-configuration-options)).\r\n&nbsp;\r\n# The recommended way to transpile a circuit is to create a preset staged pass manager and then run that pass manager on the circuit, as described in Transpile with pass managers flow. However, a simpler but less customizable alternative is to use the [<font style=\"background: lightgrey\">transpile</font>](https://docs.quantum.ibm.com/api/qiskit/compiler#qiskit.compiler.transpile) function. This function accepts the circuit directly as an argument. As with <font style=\"background: lightgrey\">generate_preset_pass_manager</font>, the specific transpiler passes used depend on the arguments, such as <font style=\"background: lightgrey\">optimization_level</font>, passed to <font style=\"background: lightgrey\">transpile</font>. In fact, internally the <font style=\"background: lightgrey\">transpile</font> function calls <font style=\"background: lightgrey\">generate_preset_pass_manager</font> to create a preset staged pass manager and runs it on the circuit.",
        "x": 390,
        "y": 360,
        "wires": [
            [
                "4e8f826009f9bcf1"
            ]
        ]
    },
    {
        "id": "ea1afd768e0b286c",
        "type": "transpiler-init-stage",
        "z": "1cf38139db7af885",
        "name": "Init Stage",
        "info": "## **Init Stage**\r\n&nbsp;\r\n# This first stage does very little by default and is primarily useful if you want to include your own initial optimizations. Because most layout and routing algorithms are only designed to work with single- and two-qubit gates, this stage is also used to translate any gates that operate on more than two qubits, into gates that only operate on one or two qubits.\r\n&nbsp;\r\n# For more information about implementing your own initial optimizations for this stage, see the section on plugins and customizing pass managers flow.",
        "x": 760,
        "y": 360,
        "wires": [
            [
                "45c50c4c55344b9f"
            ]
        ]
    },
    {
        "id": "3921dca7065f103b",
        "type": "transpiler-layout-stage",
        "z": "1cf38139db7af885",
        "name": "Layout Stage",
        "info": "## **Layout Stage**\r\n&nbsp;\r\n# The next stage involves the layout or connectivity of the backend a circuit will be sent to. In general, quantum circuits are abstract entities whose qubits are \"virtual\" or \"logical\" representations of actual qubits used in computations. To execute a sequence of gates, a one-to-one mapping from the \"virtual\" qubits to the \"physical\" qubits in an actual quantum device is necessary. This mapping is stored as a <font style=\"background: lightgrey\">Layout</font> object and is part of the constraints defined within a backend's [instruction set architecture (ISA)](https://docs.quantum.ibm.com/guides/transpile#instruction-set-architecture).\r\n&nbsp;\r\n# You can check the image of how the \"virtual\" qubits are mapped into real \"physical\" qubits in the \"Qubits Mapping Output\" node.\r\n&nbsp;\r\n# The choice of mapping is extremely important for minimizing the number of SWAP operations needed to map the input circuit onto the device topology and ensure the most well-calibrated qubits are used. Due to the importance of this stage, the preset pass managers try a few different methods to find the best layout. Typically this involves two steps: first, try to find a \"perfect\" layout (a layout that does not require any SWAP operations), and then, a heuristic pass that tries to find the best layout to use if a perfect layout cannot be found. There are two <font style=\"background: lightgrey\">Passes</font> typically used for this first step:\r\n- # <font style=\"background: lightgrey\">TrivialLayout</font>: Naively maps each virtual qubit to the same numbered physical qubit on the device, i.e., `[0,1,1,3]` -> `[0,1,1,3]`. This is historical behavior only used in <font style=\"background: lightgrey\">optimzation_level=1</font> to try to find a perfect layout. If it fails, <font style=\"background: lightgrey\">VF2Layout</font> is tried next.\r\n- # <font style=\"background: lightgrey\">VF2Layout</font>: This is an <font style=\"background: lightgrey\">AnalysisPass</font> that selects an ideal layout by treating this stage as a subgraph isomorphism problem, solved by the VF2++ algorithm. If more than one layout is found, a scoring heuristic is run to select the mapping with the lowest average error.\r\n&nbsp;\r\n# Then for the heuristic stage, two passes are used by default:\r\n- # <font style=\"background: lightgrey\">DenseLayout</font>: Finds the sub-graph of the device with the greatest connectivity and that has the same number of qubits as the circuit (used for optimization level 1 if there are control flow operations (such as IfElseOp) present in the circuit).\r\n- # <font style=\"background: lightgrey\">SabreLayout</font>: This pass selects a layout by starting from an initial random layout and repeatedly running the <font style=\"background: lightgrey\">SabreSwap</font> algorithm. This pass is only used in optimization levels 1, 2, and 3 if a perfect layout isn't found via the <font style=\"background: lightgrey\">VF2Layout</font> pass. For more details on this algorithm, refer to the paper [arXiv:1809.02573.](https://arxiv.org/abs/1809.02573)\r\n\r\n***\r\n&nbsp;\r\n## **Node Output:**\r\n- # Image: the image of qubits mapping.\r\n",
        "x": 1090,
        "y": 360,
        "wires": [
            [
                "dfcf74f088c46125",
                "f8faeaf1079ee2fe"
            ]
        ]
    },
    {
        "id": "dfcf74f088c46125",
        "type": "image",
        "z": "1cf38139db7af885",
        "name": "Qubits Mapping Output",
        "width": "480",
        "data": "payload.result.result_image",
        "dataType": "msg",
        "thumbnail": false,
        "active": true,
        "pass": false,
        "outputs": 0,
        "x": 1410,
        "y": 40,
        "wires": []
    },
    {
        "id": "74b39518f95efb87",
        "type": "image",
        "z": "1cf38139db7af885",
        "name": "15-qubit GHZ state Output",
        "width": "480",
        "data": "payload.result.result_image",
        "dataType": "msg",
        "thumbnail": false,
        "active": true,
        "pass": false,
        "outputs": 0,
        "x": 2860,
        "y": 560,
        "wires": []
    },
    {
        "id": "8f22e25079a5de12",
        "type": "debug",
        "z": "1cf38139db7af885",
        "name": "Native gates Output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.result.native_gates",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2300,
        "y": 520,
        "wires": []
    },
    {
        "id": "4e8f826009f9bcf1",
        "type": "move-to-next-node",
        "z": "1cf38139db7af885",
        "name": "Next",
        "x": 610,
        "y": 360,
        "wires": [
            [
                "ea1afd768e0b286c"
            ]
        ]
    },
    {
        "id": "45c50c4c55344b9f",
        "type": "move-to-next-node",
        "z": "1cf38139db7af885",
        "name": "Next",
        "x": 910,
        "y": 360,
        "wires": [
            [
                "3921dca7065f103b"
            ]
        ]
    },
    {
        "id": "f8faeaf1079ee2fe",
        "type": "move-to-next-node",
        "z": "1cf38139db7af885",
        "name": "Next",
        "x": 1250,
        "y": 360,
        "wires": [
            [
                "10622515b013da9a"
            ]
        ]
    },
    {
        "id": "87f7f61b262db90b",
        "type": "move-to-next-node",
        "z": "1cf38139db7af885",
        "name": "Next",
        "x": 1650,
        "y": 360,
        "wires": [
            [
                "1e642d19771ee33b"
            ]
        ]
    },
    {
        "id": "75d61f9b48e3f38d",
        "type": "move-to-next-node",
        "z": "1cf38139db7af885",
        "name": "Next",
        "x": 2250,
        "y": 360,
        "wires": [
            [
                "bf4deb5d045311b8"
            ]
        ]
    },
    {
        "id": "21ea090845bffdbe",
        "type": "move-to-next-node",
        "z": "1cf38139db7af885",
        "name": "Next",
        "x": 2730,
        "y": 360,
        "wires": [
            [
                "d130ca65ce791843"
            ]
        ]
    }
]