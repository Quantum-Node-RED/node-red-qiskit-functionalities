[
    {
        "id": "9ce3eb557acc2192",
        "type": "tab",
        "label": "Synthesize unitary operations",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "02e1d5c1bed6e717",
        "type": "inject",
        "z": "9ce3eb557acc2192",
        "name": "Start",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 420,
        "wires": [
            [
                "1d870e80365c395c"
            ]
        ],
        "info": "# In this flow, we will demonstrate you what is Synthesis Unitary Operators. Run this flow by clicking the left button of the \"Start\" node."
    },
    {
        "id": "9186769e4f4f78f7",
        "type": "image",
        "z": "9ce3eb557acc2192",
        "name": "Synthesis Unitary Operators Circuit Diagram",
        "width": "251",
        "data": "payload.result.circuit_diagram",
        "dataType": "msg",
        "thumbnail": false,
        "active": true,
        "pass": false,
        "outputs": 0,
        "x": 1350,
        "y": 560,
        "wires": []
    },
    {
        "id": "f7ab7a86aa3eacaa",
        "type": "Re-synthesis",
        "z": "9ce3eb557acc2192",
        "name": "Re-synthesis for circuit optimation",
        "info": "# Sometimes it is beneficial to re-synthesize a long series of single- and two-qubit gates, if the length can be reduced. For example, the following code snippet creates a circuit uses three two-qubit gates.\r\n```python\r\nfrom qiskit import QuantumRegister, ClassicalRegister, QuantumCircuit\r\nfrom numpy import pi\r\n \r\nqreg_q = QuantumRegister(2, 'q')\r\ncreg_c = ClassicalRegister(4, 'c')\r\ncircuit = QuantumCircuit(qreg_q, creg_c)\r\n \r\ncircuit.h(qreg_q[0])\r\ncircuit.cx(qreg_q[0], qreg_q[1])\r\ncircuit.sx(qreg_q[1])\r\ncircuit.cz(qreg_q[0], qreg_q[1])\r\ncircuit.x(qreg_q[1])\r\ncircuit.x(qreg_q[0])\r\ncircuit.cx(qreg_q[0], qreg_q[1])\r\ncircuit.h(qreg_q[0])\r\ncircuit.draw(\"mpl\")\r\n```\r\n# You can check the image of this created circuit in the \"Quantum Circuit Diagram\" node.\r\n&nbsp;\r\n# Then, we can re-synthesizing the circuits with following code:\r\n```python\r\nfrom qiskit.quantum_info import Operator\r\n \r\n# compute unitary matrix of circuit\r\nU = Operator(circuit)\r\n\r\n# re-synthesize\r\nbetter_circuit = QuantumCircuit(2)\r\nbetter_circuit.unitary(U, range(2))\r\n```\r\n# After re-synthesizing, the circuit only needs a single CX gate. We will decompose this circuit in the next node to better visualize it.\r\n\r\n***\r\n&nbsp;\r\n## **Node Output:**\r\n- # Object: `better_circuit` (Type: _qiskit.circuit.quantumcircuit.QuantumCircuit_)\r\n- # Image: the image of variable `circuit`",
        "x": 1560,
        "y": 420,
        "wires": [
            [
                "655b20d597fe41df",
                "d4cbaf494957c24f"
            ]
        ]
    },
    {
        "id": "64229b676912c786",
        "type": "Synthesize_unitary_operators",
        "z": "9ce3eb557acc2192",
        "name": "Synthesize Unitary Operators",
        "info": "# This code snippet demonstrates how to apply a specific unitary operation to a quantum circuit using the Qiskit framework. The <font style=\"background: lightgrey\">unitary</font> method in Qiskit sets the quantum circuit to perform the specified unitary operation on the qubits. This is particularly useful for implementing custom quantum gates or operations that are not built into the standard gate library. \r\n```python\r\nimport numpy as np\r\nfrom qiskit import QuantumCircuit\r\n \r\nU = 0.5 * np.array([\r\n    [1, 1, 1, 1],\r\n    [-1, 1, -1, 1],\r\n    [-1, -1, 1, 1],\r\n    [-1, 1, 1, -1]\r\n])\r\n \r\ncircuit = QuantumCircuit(2)\r\ncircuit.unitary(U, circuit.qubits)\r\n```\r\n# You can check the Image of the circuit that applied with this specific unitary operation _U_ in the \"Synthesis Unitary Operators Circuit Diagram\" node.\r\n\r\n***\r\n&nbsp;\r\n## **Node Output:**\r\n- # Image: the image of `circuit`",
        "x": 1000,
        "y": 420,
        "wires": [
            [
                "9186769e4f4f78f7",
                "841bc835e5fc04b8"
            ]
        ]
    },
    {
        "id": "655b20d597fe41df",
        "type": "image",
        "z": "9ce3eb557acc2192",
        "name": "Quantum Circuit Diagram",
        "width": "480",
        "data": "payload.result.circuit_diagram",
        "dataType": "msg",
        "thumbnail": false,
        "active": true,
        "pass": false,
        "outputs": 0,
        "x": 1870,
        "y": 560,
        "wires": []
    },
    {
        "id": "dd7626ed0f4033e5",
        "type": "image",
        "z": "9ce3eb557acc2192",
        "name": "Decompose Re-synthesized gates Circuit Diagram",
        "width": "480",
        "data": "payload.result.circuit_diagram",
        "dataType": "msg",
        "thumbnail": false,
        "active": true,
        "pass": false,
        "outputs": 0,
        "x": 2550,
        "y": 420,
        "wires": []
    },
    {
        "id": "bf8fbe57377e1566",
        "type": "Re-synthesize-decompose",
        "z": "9ce3eb557acc2192",
        "name": "Decompose Re-synthesized gates",
        "info": "## **Node Input:**\r\n- # Object: `better_circuit` (Type: _qiskit.circuit.quantumcircuit.QuantumCircuit_)\r\n\r\n***\r\n&nbsp;\r\n# In this node, we will decompose the re-synthesized circuit to better visualize the gates used to re-synthesize the unitary.\r\n```python\r\nbetter_circuit.decompose().draw()\r\n```\r\n# You can check the image of decomposed circuit in the \"Decompose Re-synthesized gates Circuit Diagram\" node. It should contain a single CX gate and 4 unitaries.\r\n\r\n***\r\n&nbsp;\r\n## **Node Output:**\r\n- # Image: the image of `better_circuit.decompose()`",
        "x": 2160,
        "y": 420,
        "wires": [
            [
                "dd7626ed0f4033e5"
            ]
        ]
    },
    {
        "id": "1d870e80365c395c",
        "type": "intro-to-synthesis-unitary-operators",
        "z": "9ce3eb557acc2192",
        "name": "Introduction to Synthesis Unitary Operators",
        "info": "# A unitary operation describes a norm-preserving change to a quantum system. For ùëõ qubits this change is described by a 2ùëõ√ó2ùëõ dimensional, complex matrix ùëà whose adjoint equals the inverse, that is ùëà‚Ä†ùëà=1.\r\n&nbsp;\r\n# Synthesizing specific unitary operations into a set of quantum gates is a fundamental task used, for example, in the design and application of quantum algorithms or in compiling quantum circuits.\r\n&nbsp;\r\n# While efficient synthesis is possible for certain classes of unitaries ‚Äì like those composed of Clifford gates or having a tensor product structure ‚Äì most unitaries do not fall into these categories. For general unitary matrices, synthesis is a complex task with computational costs that increase exponentially with the number of qubits. Therefore, if you know an efficient decomposition for the unitary you would like to implement, it will likely be better than a general synthesis.\r\n&nbsp;\r\n# **Note:** If no decomposition is available, the Qiskit SDK provides you with the tools to find one. However, note that this generally generates deep circuits that may be unsuitable to run on noisy quantum computers.",
        "x": 410,
        "y": 420,
        "wires": [
            [
                "af6f0651393a1a95"
            ]
        ]
    },
    {
        "id": "af6f0651393a1a95",
        "type": "move-to-next-node",
        "z": "9ce3eb557acc2192",
        "name": "Next",
        "x": 670,
        "y": 420,
        "wires": [
            [
                "64229b676912c786"
            ]
        ]
    },
    {
        "id": "841bc835e5fc04b8",
        "type": "move-to-next-node",
        "z": "9ce3eb557acc2192",
        "name": "Next",
        "x": 1230,
        "y": 420,
        "wires": [
            [
                "f7ab7a86aa3eacaa"
            ]
        ]
    },
    {
        "id": "d4cbaf494957c24f",
        "type": "move-to-next-node",
        "z": "9ce3eb557acc2192",
        "name": "Next",
        "x": 1810,
        "y": 420,
        "wires": [
            [
                "bf8fbe57377e1566"
            ]
        ]
    }
]