[
    {
        "id": "7944db75be977cfb",
        "type": "tab",
        "label": "Features of Pulse Builder",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ae9b1588a38c411d",
        "type": "pulse-builder-feature",
        "z": "7944db75be977cfb",
        "name": "Feature of pulse builder",
        "x": 200,
        "y": 780,
        "wires": [
            [
                "c399e60dff7d51ca",
                "cc5a520990ce8449"
            ]
        ],
        "info": "# **In this flow, we will show you the Pulse Builder features for learning how to build schedules. This is not an exhaustive list. For more details about using the Pulse Builder, refer to the [Pulse API reference](https://docs.quantum.ibm.com/api/qiskit/pulse).**"
    },
    {
        "id": "c399e60dff7d51ca",
        "type": "pulse-builder-alignment-context",
        "z": "7944db75be977cfb",
        "name": "Alignment Context",
        "x": 590,
        "y": 540,
        "wires": [
            [
                "63b70eb15253ea56",
                "f987c36e862fba83",
                "784de81a7d9686b7",
                "d7170c08dc8617a1"
            ]
        ],
        "info": "# The builder has alignment contexts that influence how a schedule is built. Contexts can also be nested. In the following nodes, we will show you different alignment strategy,  and use <font style=\"background:lightgrey\">.draw()</font> to see how the pulses are aligned.\r\n&nbsp;\r\n# Regardless of the alignment context, the duration of the resulting schedule is as short as it can be while including every instruction and following the alignment rules. This still allows some degrees of freedom for scheduling instructions off the \"longest path\". The examples will illustrate this.\r\n&nbsp;\r\n# **You can try out different strategies by clicking the \"Start\" node for each of them and check the output image.**"
    },
    {
        "id": "63b70eb15253ea56",
        "type": "pulse-builder-align-left",
        "z": "7944db75be977cfb",
        "name": "align_left()",
        "x": 1190,
        "y": 40,
        "wires": [
            [
                "6b13d79a1db8ed2f"
            ]
        ],
        "info": "# The builder has alignment contexts that influence how a schedule is built. The default is <font style=\"background: lightgrey\">align_left</font>.\r\n&nbsp;\r\n# The following code snippet create a pulse schedule where three Gaussian pulses(with duration 100 each) are played on two drive channels, all aligned to start at the same time.\r\n```python\r\nwith pulse.build(backend, name='Left align example') as program:\r\n    with pulse.align_left():\r\n        gaussian_pulse = library.Gaussian(100, 0.5, 20)\r\n        pulse.play(gaussian_pulse, pulse.drive_channel(0))\r\n        pulse.play(gaussian_pulse, pulse.drive_channel(1))\r\n        pulse.play(gaussian_pulse, pulse.drive_channel(1))\r\n```\r\n&nbsp;\r\n# Check the output image and notice how there is no scheduling freedom for the pulses on channel <font style=\"background: lightgrey\">D1</font>. The second waveform begins immediately after the first. The pulse on channel <font style=\"background: lightgrey\">D0</font> can start at any time between <font style=\"background: lightgrey\">t=0</font> and <font style=\"background: lightgrey\">t=100</font> without changing the duration of the overall schedule. The <font style=\"background: lightgrey\">align_left</font> context sets the start time of this pulse to <font style=\"background: lightgrey\">t=0</font>. You can think of this like left-justification of a text document.\r\n\r\n***\r\n&nbsp;\r\n## **Node Output:**\r\n- # Image: the image of pulses which are aligned left."
    },
    {
        "id": "a73bd14c3445bca1",
        "type": "inject",
        "z": "7944db75be977cfb",
        "name": "Start",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 950,
        "y": 40,
        "wires": [
            [
                "63b70eb15253ea56"
            ]
        ],
        "info": "# Try out <font style=\"background: lightgrey\">align_left()</font>"
    },
    {
        "id": "6b13d79a1db8ed2f",
        "type": "image",
        "z": "7944db75be977cfb",
        "name": "Left Align Example",
        "width": "840",
        "data": "payload.result.result_image",
        "dataType": "msg",
        "thumbnail": false,
        "active": true,
        "pass": false,
        "outputs": 0,
        "x": 1510,
        "y": 40,
        "wires": [],
        "info": "# The image of pulses with align_left"
    },
    {
        "id": "f987c36e862fba83",
        "type": "pulse-builder-align-right",
        "z": "7944db75be977cfb",
        "name": "align_right()",
        "x": 1190,
        "y": 300,
        "wires": [
            [
                "75052ce7be4a8443"
            ]
        ],
        "info": "# <font style=\"background: lightgrey\">align_right</font> does the opposite of <font style=\"background: lightgrey\">align_left</font>. Left and right are also sometimes called \"as soon as possible\" and \"as late as possible\" scheduling, respectively.\r\n&nbsp;\r\n# In this code snippet, we create a pulse schedule where three Gaussian pulses(with duration 100 each) are played on two drive channels, all aligned to end at the same time. It chooses <font style=\"background: lightgrey\">t=100</font> in the above example to begin the Gaussian pulse on <font style=\"background: lightgrey\">D0</font>.\r\n```python\r\nwith pulse.build(backend, name='Right align example') as program:\r\n    with pulse.align_right():\r\n        gaussian_pulse = library.Gaussian(100, 0.5, 20)\r\n        pulse.play(gaussian_pulse, pulse.drive_channel(0))\r\n        pulse.play(gaussian_pulse, pulse.drive_channel(1))\r\n        pulse.play(gaussian_pulse, pulse.drive_channel(1))\r\n```\r\n\r\n***\r\n&nbsp;\r\n## **Node Output:**\r\n- # Image: the image of pulses which are aligned right."
    },
    {
        "id": "cfa6895b941b4027",
        "type": "inject",
        "z": "7944db75be977cfb",
        "name": "Start",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 950,
        "y": 300,
        "wires": [
            [
                "f987c36e862fba83"
            ]
        ],
        "info": "# Try out <font style=\"background: lightgrey\">align_right()</font>"
    },
    {
        "id": "75052ce7be4a8443",
        "type": "image",
        "z": "7944db75be977cfb",
        "name": "Right Align Example",
        "width": "840",
        "data": "payload.result.result_image",
        "dataType": "msg",
        "thumbnail": false,
        "active": true,
        "pass": false,
        "outputs": 0,
        "x": 1520,
        "y": 300,
        "wires": [],
        "info": "# The image of pulses with align_right"
    },
    {
        "id": "784de81a7d9686b7",
        "type": "pulse-builder-align-equispaced",
        "z": "7944db75be977cfb",
        "name": "align_equispaced(duration)",
        "x": 1240,
        "y": 580,
        "wires": [
            [
                "ea9d4c1ab32c8423"
            ]
        ],
        "info": "# If the duration of a particular block is known, you can also use <font style=\"background: lightgrey\">align_equispaced</font> to insert equal duration delays between each instruction.\r\n&nbsp;\r\n# This code snippet generates and plays Gaussian pulse on two separate drive channels, ensuring equispaced alignment for the first drive channel <font style=\"background: lightgrey\">D0</font> over 150 dt.\r\n```python\r\nwith pulse.build(backend, name='example') as program:\r\n    gaussian_pulse = library.Gaussian(100, 0.5, 20)\r\n    with pulse.align_equispaced(int(1.5*gaussian_pulse.duration)):\r\n        pulse.play(gaussian_pulse, pulse.drive_channel(0))\r\n    pulse.play(gaussian_pulse, pulse.drive_channel(1))\r\n    pulse.play(gaussian_pulse, pulse.drive_channel(1))\r\n```\r\n# You can see how the end of first pulse aligned with 150 dt on channel D0 in the \"Align by duration Example\" node.\r\n\r\n***\r\n&nbsp;\r\n## **Node Output:**\r\n- # Image: the image of pulses which are aligned with equal duration."
    },
    {
        "id": "63895d4cf5c8af49",
        "type": "inject",
        "z": "7944db75be977cfb",
        "name": "Start",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 930,
        "y": 580,
        "wires": [
            [
                "784de81a7d9686b7"
            ]
        ],
        "info": "# Try out <font style=\"background: lightgrey\">align_equispaced(duration)</font>"
    },
    {
        "id": "ea9d4c1ab32c8423",
        "type": "image",
        "z": "7944db75be977cfb",
        "name": "Align by duration Example",
        "width": "840",
        "data": "payload.result.result_image",
        "dataType": "msg",
        "thumbnail": false,
        "active": true,
        "pass": false,
        "outputs": 0,
        "x": 1530,
        "y": 580,
        "wires": [],
        "info": "# The image of pulses with align_equispaced(duration)"
    },
    {
        "id": "d7170c08dc8617a1",
        "type": "pulse-builder-align-sequential",
        "z": "7944db75be977cfb",
        "name": "align_sequential()",
        "x": 1210,
        "y": 860,
        "wires": [
            [
                "3ff4579dfb2f69fd"
            ]
        ],
        "info": "# <font style=\"background: lightgrey\">align_sequential</font> does not schedule instructions in parallel. Each instruction will begin at the end of the previously added instruction.\r\n&nbsp;\r\n# In the code snippet below, we create a pulse schedule where three Gaussian pulses(with duration 100 each) are played on two drive channels. And in the output image, you can see these three pulses connected end-to-end in sequence.\r\n```python\r\nwith pulse.build(backend, name='example') as program:\r\n    with pulse.align_sequential():\r\n        gaussian_pulse = library.Gaussian(100, 0.5, 20)\r\n        pulse.play(gaussian_pulse, pulse.drive_channel(0))\r\n        pulse.play(gaussian_pulse, pulse.drive_channel(1))\r\n        pulse.play(gaussian_pulse, pulse.drive_channel(1))\r\n```\r\n\r\n***\r\n&nbsp;\r\n## **Node Output:**\r\n- # Image: the image of pulses which are aligned by sequential order.\r\n"
    },
    {
        "id": "180bb90872aed779",
        "type": "inject",
        "z": "7944db75be977cfb",
        "name": "Start",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 930,
        "y": 860,
        "wires": [
            [
                "d7170c08dc8617a1"
            ]
        ],
        "info": "# Try out <font style=\"background: lightgrey\">align_squential()</font>"
    },
    {
        "id": "3ff4579dfb2f69fd",
        "type": "image",
        "z": "7944db75be977cfb",
        "name": "Align by sequential Example",
        "width": "840",
        "data": "payload.result.result_image",
        "dataType": "msg",
        "thumbnail": false,
        "active": true,
        "pass": false,
        "outputs": 0,
        "x": 1540,
        "y": 860,
        "wires": [],
        "info": "# The image of pulses with align_sequential()"
    },
    {
        "id": "cc5a520990ce8449",
        "type": "pulse-builder-phase-frequency-offset",
        "z": "7944db75be977cfb",
        "name": "Phase offset and Frequency offset",
        "x": 620,
        "y": 1180,
        "wires": [
            [
                "1492fd2117aef891"
            ]
        ],
        "info": "# The builder can also help temporarily offset the frequency or phase of pulses on a channel.\r\n&nbsp;\r\n# In following code, builds a pulse program named \"Offset example\" on a specified backend. It first applies a phase offset of <font style=\"background: lightgrey\">3.14</font> to a Gaussian pulse played on drive channel <font style=\"background: lightgrey\">D0</font>. Then, it applies a frequency offset of <font style=\"background: lightgrey\">10e6</font> to the pulse played on the same drive channel.\r\n```python\r\nwith pulse.build(backend, name='Offset example') as program:\r\n    with pulse.phase_offset(3.14, pulse.drive_channel(0)):\r\n        pulse.play(gaussian_pulse, pulse.drive_channel(0))\r\n        with pulse.frequency_offset(10e6, pulse.drive_channel(0)):\r\n            pulse.play(gaussian_pulse, pulse.drive_channel(0))\r\n```\r\n\r\n***\r\n&nbsp;\r\n## **Node Output:**\r\n- # Image: the image of pulse with phase and frequency offset.\r\n"
    },
    {
        "id": "1492fd2117aef891",
        "type": "image",
        "z": "7944db75be977cfb",
        "name": "Phase and Frequency Offset Example",
        "width": "840",
        "data": "payload.result.result_image",
        "dataType": "msg",
        "thumbnail": false,
        "active": true,
        "pass": false,
        "outputs": 0,
        "x": 1070,
        "y": 1180,
        "wires": [],
        "info": "# The image of phase offset and frequency offset output"
    },
    {
        "id": "27fca0eb632aee07",
        "type": "inject",
        "z": "7944db75be977cfb",
        "name": "Start",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 1180,
        "wires": [
            [
                "cc5a520990ce8449"
            ]
        ],
        "info": "# Try Phase offset and Frequency offset"
    }
]