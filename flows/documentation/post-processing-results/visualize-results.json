[
    {
        "id": "edee7a65a72c405c",
        "type": "tab",
        "label": "Vizualize results",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "52bef10a42ef909c",
        "type": "inject",
        "z": "edee7a65a72c405c",
        "name": "Start",
        "props": [
            {
                "p": "payload.numQubits",
                "v": "2",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 100,
        "wires": [
            [
                "04eaef09d49b5e7f"
            ]
        ]
    },
    {
        "id": "f69e34510548fbb0",
        "type": "image",
        "z": "edee7a65a72c405c",
        "name": "Histogram",
        "width": "450",
        "data": "payload.result.quantum_histogram",
        "dataType": "msg",
        "thumbnail": false,
        "active": true,
        "pass": false,
        "outputs": 0,
        "x": 670,
        "y": 100,
        "wires": []
    },
    {
        "id": "f5e25222af4816e9",
        "type": "image",
        "z": "edee7a65a72c405c",
        "name": "Estimator w. error",
        "width": "450",
        "data": "payload.result.plotted_estimator_w_errors",
        "dataType": "msg",
        "thumbnail": false,
        "active": true,
        "pass": false,
        "outputs": 0,
        "x": 690,
        "y": 1320,
        "wires": []
    },
    {
        "id": "9dc352fae6e2e5b8",
        "type": "image",
        "z": "edee7a65a72c405c",
        "name": "Option histogram",
        "width": "450",
        "data": "payload.result.options_histogram",
        "dataType": "msg",
        "thumbnail": false,
        "active": true,
        "pass": false,
        "outputs": 0,
        "x": 690,
        "y": 500,
        "wires": []
    },
    {
        "id": "3cfc4e78d4e38fa6",
        "type": "image",
        "z": "edee7a65a72c405c",
        "name": "Plotted estimator",
        "width": "450",
        "data": "payload.result.plotted_estimator",
        "dataType": "msg",
        "thumbnail": false,
        "active": true,
        "pass": false,
        "outputs": 0,
        "x": 690,
        "y": 920,
        "wires": []
    },
    {
        "id": "04eaef09d49b5e7f",
        "type": "plot-histogram",
        "z": "edee7a65a72c405c",
        "name": "Plot histogram",
        "info": "# [Visualize results guide.](https://docs.quantum.ibm.com/guides/visualize-results#)\r\n&nbsp;\r\n# The <font style='background: lightgrey'>_`plot_histogram`_</font> function visualizes the result of sampling a quantum circuit on a QPU or simulator.\r\n# This function returns a <font style='background: lightgrey'>_`matplotlib.Figure`_</font> object. When the last line of a code cell outputs these objects, Jupyter notebooks display them below the cell. If you call these functions in some other environments or in scripts, you will need to explicitly show or save the outputs. Two options are:\r\n- Call <font style='background: lightgrey'>_`.show()`_</font> on the returned object to open the image in a new window (assuming your configured matplotlib backend is interactive).\r\n- Call <font style='background: lightgrey'>_`.savefig(\"out.png\")`_</font> to save the figure to <font style='background: lightgrey'>_`out.png`_</font> in the current working directory. The <font style='background: lightgrey'>_`savefig()`_</font> method takes a path so you can adjust the location and filename where you're saving the output. For example, <font style='background: lightgrey'>_`plot_state_city(psi).savefig(\"out.png\")`_</font>\r\n# For example, make a two-qubit Bell state:\r\n```python\r\nfrom qiskit_aer.primitives import Sampler\r\nfrom qiskit import QuantumCircuit\r\nfrom qiskit.visualization import plot_histogram\r\n\r\n# quantum circuit to make a Bell state\r\nbell = QuantumCircuit(2)\r\nbell.h(0)\r\nbell.cx(0, 1)\r\nbell.measure_all()\r\n\r\n# execute the quantum circuit\r\nquasi_dists = Sampler().run(bell, shots=1000).result().quasi_dists[0]\r\nplot_histogram(quasi_dists)\r\n```\r\n ",
        "x": 420,
        "y": 100,
        "wires": [
            [
                "f69e34510548fbb0"
            ]
        ]
    },
    {
        "id": "3f2286a08f67327e",
        "type": "plot-histogram-options",
        "z": "edee7a65a72c405c",
        "name": "Plot histogram options",
        "info": "# [Visualize results guide.](https://docs.quantum.ibm.com/guides/visualize-results#)\r\n&nbsp;\r\n# Use the following options for <font style='background: lightgrey'>_`plot_histogram`_</font> to adjust the output graph.\r\n- <font style='background: lightgrey'>_`legend`_</font>: Provides a label for the executions. It takes a list of strings used to label each execution's results. This is mostly useful when plotting multiple execution results in the same histogram.\r\n\r\n- <font style='background: lightgrey'>_`sort`_</font>: Adjusts the order of the bars in the histogram. It can be to either ascending order with <font style='background: lightgrey'>_`asc`_</font> or decending order with <font style='background: lightgrey'>_`desc`_</font>.\r\n\r\n- <font style='background: lightgrey'>_`number_to_keep`_</font>: Takes an integer for the number of terms to show. The rest are grouped together in a single bar called \"rest\".\r\n\r\n- <font style='background: lightgrey'>_`color`_</font>: Adjusts the color of the bars; takes a string or alist of strings for the colors to use for the bars for each execution.\r\n\r\n- <font style='background: lightgrey'>_`bar_labels`_</font>: Adjusts whether labels are printed above the bars.\r\n\r\n- <font style='background: lightgrey'>_`figsize`_</font>: Takes a tuple of the size in inches to make the output figure.\r\n```python\r\nfrom qiskit_aer.primitives import Sampler\r\nfrom qiskit import QuantumCircuit\r\nfrom qiskit.visualization import plot_histogram\r\n\r\n# quantum circuit to make a Bell state\r\nbell = QuantumCircuit(2)\r\nbell.h(0)\r\nbell.cx(0, 1)\r\nbell.measure_all()\r\n\r\n# execute the quantum circuit\r\nquasi_dists = Sampler().run(bell, shots=1000).result().quasi_dists[0]\r\n\r\n# Execute two-qubit Bell state again\r\nsecond_quasi_dists = Sampler().run(bell, shots=1000).result().quasi_dists[0]\r\nplot_histogram(\r\n    [quasi_dists, second_quasi_dists],\r\n    legend=[\"first\", \"second\"],\r\n    sort=\"desc\",\r\n    figsize=(15, 12),\r\n    color=[\"orange\", \"black\"],\r\n    bar_labels=False,\r\n)\r\n```\r\n ",
        "x": 420,
        "y": 500,
        "wires": [
            [
                "9dc352fae6e2e5b8"
            ]
        ]
    },
    {
        "id": "0f49fba30f2661fa",
        "type": "plot-estimator-results",
        "z": "edee7a65a72c405c",
        "name": "Plot estimator results",
        "info": "# [Visualize results guide.](https://docs.quantum.ibm.com/guides/visualize-results#)\r\n&nbsp;\r\n# Qiskit does not have a built-in function for plotting <font style='background: lightgrey'>_`Estimator `_</font> results, but you can use Matplotlib's [bar plot](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.bar.html#) for a quick visualization.\r\n# To demonstrate, the following code example estimates the expectation values of seven different observables on a quantum state.\r\n```python\r\nfrom qiskit import QuantumCircuit\r\nfrom qiskit.quantum_info import SparsePauliOp\r\nfrom qiskit_aer.primitives import Estimator\r\nfrom matplotlib import pyplot as plt\r\n\r\n# Simple estimation experiment to create results\r\nqc = QuantumCircuit(2)\r\nqc.h(0)\r\nqc.crx(1.5, 0, 1)\r\n\r\nobservables_labels = [\"ZZ\", \"XX\", \"YZ\", \"ZY\", \"XY\", \"XZ\", \"ZX\"]\r\nobservables = [SparsePauliOp(label) for label in observables_labels]\r\n\r\nresult = Estimator().run([qc]*7, observables).result()\r\n\r\n# Plot using Matplotlib\r\nplt.bar(observables_labels, result.values)\r\n```\r\n ",
        "x": 420,
        "y": 920,
        "wires": [
            [
                "3cfc4e78d4e38fa6"
            ]
        ]
    },
    {
        "id": "bbd9c4d7b8cf7833",
        "type": "plot-estimator-results-w-errors",
        "z": "edee7a65a72c405c",
        "name": "Estimator results w. errors",
        "info": "# [Visualize results guide.](https://docs.quantum.ibm.com/guides/visualize-results#)\r\n&nbsp;\r\n# The following code example estimates the standard error from the variance of each result and adds them as error bars. See the [bar plot documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.bar.html#) for a full description of the plot.\r\n```python\r\nfrom qiskit import QuantumCircuit\r\nfrom qiskit.quantum_info import SparsePauliOp\r\nfrom qiskit_aer.primitives import Estimator\r\nfrom matplotlib import pyplot as plt\r\nfrom math import sqrt\r\n\r\n# Simple estimation experiment to create results\r\nqc = QuantumCircuit(2)\r\nqc.h(0)\r\nqc.crx(1.5, 0, 1)\r\n\r\nobservables_labels = [\"ZZ\", \"XX\", \"YZ\", \"ZY\", \"XY\", \"XZ\", \"ZX\"]\r\nobservables = [SparsePauliOp(label) for label in observables_labels]\r\n\r\nresult = Estimator().run([qc]*7, observables).result()\r\nstandard_error = [sqrt(exp_data[\"variance\"])/sqrt(exp_data[\"shots\"]) for exp_data in result.metadata]\r\n\r\n_, ax = plt.subplots()\r\nax.bar(observables_labels, result.values, yerr=standard_error, capsize=2)\r\nax.set_title(\"Expectation values (with standard errors)\")```\r\n ",
        "x": 410,
        "y": 1320,
        "wires": [
            [
                "f5e25222af4816e9"
            ]
        ]
    },
    {
        "id": "36ce5d32881eee54",
        "type": "inject",
        "z": "edee7a65a72c405c",
        "name": "Start",
        "props": [
            {
                "p": "payload.numQubits",
                "v": "2",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 500,
        "wires": [
            [
                "3f2286a08f67327e"
            ]
        ]
    },
    {
        "id": "4d345ffaab64f230",
        "type": "inject",
        "z": "edee7a65a72c405c",
        "name": "Start",
        "props": [
            {
                "p": "payload.numQubits",
                "v": "2",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 920,
        "wires": [
            [
                "0f49fba30f2661fa"
            ]
        ]
    },
    {
        "id": "884b17b480831fc7",
        "type": "inject",
        "z": "edee7a65a72c405c",
        "name": "Start",
        "props": [
            {
                "p": "payload.numQubits",
                "v": "2",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 1320,
        "wires": [
            [
                "bbd9c4d7b8cf7833"
            ]
        ]
    }
]