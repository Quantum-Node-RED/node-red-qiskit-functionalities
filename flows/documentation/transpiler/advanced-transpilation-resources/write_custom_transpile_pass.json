[
    {
        "id": "93383abc3079eac8",
        "type": "tab",
        "label": "Write a custom transpiler pass",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "738c4ca3129e3ff3",
        "type": "create-circuit-for-dag",
        "z": "93383abc3079eac8",
        "name": "Create a circuit",
        "x": 680,
        "y": 360,
        "wires": [
            [
                "ee6cf1c89c0b108e",
                "26958b827d645188"
            ]
        ],
        "info": "# In our example, we will illustrate the DAG by creating a simple circuit that prepares a Bell state and applies an _Rz_ rotation, depending on the measurement outcome.\r\n&nbsp;\r\n# The following code snippet sets up a quantum circuit with three qubits and three classical bits. It applies a Hadamard gate to the first qubit, creates an entanglement between the first and second qubits using a CNOT gate, and measures the first qubit into the first classical bit. Finally, it applies a conditional Rz rotation to the second qubit based on the classical measurement outcome.\r\n```python\r\nqr = QuantumRegister(3, 'qr')\r\ncr = ClassicalRegister(3, 'cr')\r\nqc = QuantumCircuit(qr, cr)\r\n\r\nqc.h(qr[0])\r\nqc.cx(qr[0], qr[1])\r\nqc.measure(qr[0], cr[0])\r\nqc.rz(np.pi/2, qr[1]).c_if(cr, 2)\r\n```\r\n# You can check the image of this quantum circuit in the \"Circuit Image Output\" node."
    },
    {
        "id": "ee6cf1c89c0b108e",
        "type": "image",
        "z": "93383abc3079eac8",
        "name": "Circuit Image Output",
        "width": "320",
        "data": "payload.result.result_image",
        "dataType": "msg",
        "thumbnail": false,
        "active": true,
        "pass": false,
        "outputs": 0,
        "x": 940,
        "y": 420,
        "wires": []
    },
    {
        "id": "c76c0499043c485b",
        "type": "inject",
        "z": "93383abc3079eac8",
        "name": "Start",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 90,
        "y": 600,
        "wires": [
            [
                "431ec125ad0aeb55",
                "6770498ccf315cf4"
            ]
        ],
        "info": "# The Qiskit SDK lets you create custom transpilation passes and run them in the <font style=\"background: lightgrey\">PassManager</font> object or add them to a <font style=\"background: lightgrey\">StagedPassManager</font>. Here we will demonstrate how to write a transpiler pass, focusing on building a pass that performs [Pauli twirling](https://arxiv.org/abs/quant-ph/0606161) on the noisy quantum gates in a quantum circuit. This example uses the DAG, which is the object manipulated by the <font style=\"background: lightgrey\">TransformationPass</font> type of pass.\r\n&nbsp;\r\n# **Press the button to start learning the flow.**"
    },
    {
        "id": "26958b827d645188",
        "type": "generate-dag-for-circuit",
        "z": "93383abc3079eac8",
        "name": "Generate DAG Diagram",
        "x": 1070,
        "y": 360,
        "wires": [
            [
                "c32aff32a59c0913"
            ]
        ],
        "info": "# After creating the circuit, you can use the <font style=\"background: lightgrey\">qiskit.tools.visualization.dag_drawer()</font> function to view this circuit's DAG(You need to install the [graphviz library](https://graphviz.org/download/) first to plot DAG yourself). There are three kinds of graph nodes: qubit/clbit nodes (green), operation nodes (blue), and output nodes (red). Each edge indicates data flow (or dependency) between two nodes.\r\n```python\r\nfrom qiskit.converters import circuit_to_dag\r\nfrom qiskit.tools.visualization import dag_drawer\r\n \r\ndag = circuit_to_dag(qc)\r\ndag_drawer(dag)\r\n```\r\n# You can check the DAG diagram in \"DAG Output\" node."
    },
    {
        "id": "c32aff32a59c0913",
        "type": "image",
        "z": "93383abc3079eac8",
        "name": "DAG Output",
        "width": "320",
        "data": "payload.result.result_image",
        "dataType": "msg",
        "thumbnail": false,
        "active": true,
        "pass": false,
        "outputs": 0,
        "x": 1410,
        "y": 160,
        "wires": []
    },
    {
        "id": "431ec125ad0aeb55",
        "type": "intro-to-dag",
        "z": "93383abc3079eac8",
        "name": "What is DAG diagram?",
        "x": 400,
        "y": 360,
        "wires": [
            [
                "738c4ca3129e3ff3"
            ]
        ],
        "info": "# Before building a pass, it is important to introduce the internal representation of quantum circuits in Qiskit, the [directed acyclic graph (DAG)](https://docs.quantum.ibm.com/api/qiskit/qiskit.dagcircuit.DAGCircuit) (see this [tutorial](https://www.rustworkx.org/tutorial/dags.html#) for an overview). \r\n&nbsp;\r\n# In Qiskit, within the transpilation stages, circuits are represented using a DAG. In general, a DAG is composed of **vertices** (also known as \"nodes\") and directed **edges** that connect pairs of vertices in a particular orientation. This representation is stored using <font style=\"background: lightgrey\">qiskit.dagcircuit.DAGCircuit</font> objects that are composed of invididual <font style=\"background: lightgrey\">DagNode</font> objects. The advantage of this representation over a pure list of gates (that is, a _netlist_) is that the flow of information between operations is explicit, making it easier to make transformation decisions.\r\n&nbsp;\r\n# **Note :** In this flow, we will directly show you the DAG diagram and the corresponding visualizations. However, if you want to manually try building the code yourself or customize your code, you will need to install the [graphviz library](https://graphviz.org/download/) for the DAG plotting functions."
    },
    {
        "id": "6770498ccf315cf4",
        "type": "intro-to-transpiler-pass",
        "z": "93383abc3079eac8",
        "name": "What is transpiler passes?",
        "x": 400,
        "y": 740,
        "wires": [
            [
                "ac9f6e49885b7035"
            ]
        ],
        "info": "# Transpiler passes are classified either as an [<font style=\"background: lightgrey\">AnalysisPass</font>](https://docs.quantum.ibm.com/api/qiskit/qiskit.transpiler.AnalysisPass) or a [<font style=\"background: lightgrey\">TransformationPass</font>](https://docs.quantum.ibm.com/api/qiskit/qiskit.transpiler.TransformationPass). Passes in general work with the [DAG](https://docs.quantum.ibm.com/api/qiskit/qiskit.dagcircuit.DAGCircuit) and the <font style=\"background: lightgrey\">property_set</font>, a dictionary-like object for storing properties determined by analysis passes. Analysis passes work with both the DAG and its <font style=\"background: lightgrey\">property_set</font>. They cannot modify the DAG, but can modify the <font style=\"background: lightgrey\">property_set</font>. This contrasts with transformation passes, which do modify the DAG, and can read (but not write to) <font style=\"background: lightgrey\">property_set</font>. For example, transformation passes translate a circuit to its [ISA](https://docs.quantum.ibm.com/guides/transpile#instruction-set-architecture) or perform routing passes to insert SWAP gates where needed."
    },
    {
        "id": "ac9f6e49885b7035",
        "type": "create-transpiler-pass",
        "z": "93383abc3079eac8",
        "name": "Create a PauliTwirl transpiler pass",
        "x": 760,
        "y": 740,
        "wires": [
            [
                "d66d51453976f9dc"
            ]
        ],
        "info": "# In our example, we will demonstrate how to construct a transpiler pass that adds Pauli twirls.\r\n&nbsp;\r\n# [Pauli twirling](https://arxiv.org/abs/quant-ph/0606161) is an error suppression strategy that randomizes how qubits experience noisy channels, which we assume to be two-qubit gates in this example (because they are much more error-prone than single-qubit gates). The Pauli twirls do not affect the two-qubit gates' operation. They are chosen such that those applied before the two-qubit gate (to the left) are countered by those applied after the two-qubit gate (to the right). In this sense, the two-qubit operations are identical, but the way they are performed is different. One benefit of Pauli twirling is that it turns coherent errors into stochastic errors, which can be improved by averaging more.\r\n&nbsp;\r\n# To create a PauliTwirl class, we first need to define '_init_' method for PauliTwirl object. If no specific gates are provided to twirl, it defaults to the CXGate and ECRGate. It then calls build_twirl_set() to prepare the set of Pauli operations.\r\n```python\r\nfrom qiskit.dagcircuit import DAGCircuit\r\nfrom qiskit.circuit import QuantumCircuit, QuantumRegister, Gate\r\nfrom qiskit.circuit.library import CXGate, ECRGate\r\nfrom qiskit.transpiler import PassManager\r\nfrom qiskit.transpiler.basepasses import TransformationPass\r\nfrom qiskit.quantum_info import Operator, pauli_basis\r\n \r\nimport numpy as np\r\n \r\nfrom typing import Iterable, Optional\r\n\r\nclass PauliTwirl(TransformationPass):\r\n    \"\"\"Add Pauli twirls to two-qubit gates.\"\"\"\r\n \r\n    def __init__(\r\n        self,\r\n        gates_to_twirl: Optional[Iterable[Gate]] = None,\r\n    ):\r\n        \"\"\"\r\n        Args:\r\n            gates_to_twirl: Names of gates to twirl. The default behavior is to twirl all\r\n                two-qubit basis gates, `cx` and `ecr` for IBM backends.\r\n        \"\"\"\r\n        if gates_to_twirl is None:\r\n            gates_to_twirl = [CXGate(), ECRGate()]\r\n        self.gates_to_twirl = gates_to_twirl\r\n        self.build_twirl_set()\r\n        super().__init__()\r\n```\r\n&nbsp;\r\n# Transpiler passes act on the [DAG](https://docs.quantum.ibm.com/api/qiskit/qiskit.dagcircuit.DAGCircuit), so the important method to override is <font style=\"background: lightgrey\">.run()</font>, which takes the DAG as input. Initializing pairs of Paulis as shown preserves the operation of each two-qubit gate. This is done with the helper method <font style=\"background: lightgrey\">build_twirl_set</font>, which goes through each two-qubit Pauli (as obtained from <font style=\"background: lightgrey\">pauli_basis(2)</font>) and finds the other Pauli that preserves the operation.\r\n```python\r\n def build_twirl_set(self):\r\n        \"\"\"\r\n        Build a set of Paulis to twirl for each gate and store internally as .twirl_set.\r\n        \"\"\"\r\n        self.twirl_set = {}\r\n \r\n        # iterate through gates to be twirled\r\n        for twirl_gate in self.gates_to_twirl:\r\n            twirl_list = []\r\n \r\n            # iterate through Paulis on left of gate to twirl\r\n            for pauli_left in pauli_basis(2):\r\n \r\n                # iterature through Paulis on right of gate to twirl\r\n                for pauli_right in pauli_basis(2):\r\n \r\n                    # save pairs that produce identical operation as gate to twirl\r\n                    if (Operator(pauli_left) @ Operator(twirl_gate)).equiv(Operator(twirl_gate) @ pauli_right):\r\n                        twirl_list.append((pauli_left, pauli_right))\r\n \r\n            self.twirl_set[twirl_gate.name] = twirl_list\r\n```\r\n&nbsp;\r\n# Finally, we need to override <font style=\"background: lightgrey\">.run()</font> method. From the DAG, use the <font style=\"background: lightgrey\">op_nodes()</font> method to return all of its nodes. The DAG can also be used to collect runs, which are sequences of nodes that run uninterrupted on a qubit. These can be collected as single-qubit runs with <font style=\"background: lightgrey\">collect_1q_runs</font>, two-qubit runs with <font style=\"background: lightgrey\">collect_2q_runs</font>, and runs of nodes where the instruction names are in a namelist with <font style=\"background: lightgrey\">collect_runs</font>. The <font style=\"background: lightgrey\">DAGCircuit</font> has many methods for searching and traversing a graph. One commonly used method is <font style=\"background: lightgrey\">topological_op_nodes</font>, which provides the nodes in a dependency ordering. Other methods such as <font style=\"background: lightgrey\">bfs_successors</font> are used primarily to determine how nodes interact with subsequent operations on a DAG.\r\n&nbsp;\r\n# In the example, we want to replace each node, representing an instruction, with a subcircuit built as a mini DAG. The mini DAG has a two-qubit quantum register added to it. Operations are added to the mini DAG by using <font style=\"background: lightgrey\">apply_operation_back</font>, which places the <font style=\"background: lightgrey\">Instruction</font> on the mini DAG's output (whereas <font style=\"background: lightgrey\">apply_operation_front</font> would place it on the mini DAG's input). The node is then substituted by the mini DAG by using <font style=\"background: lightgrey\">substitute_node_with_dag</font>, and the process continues over each instance of <font style=\"background: lightgrey\">CXGate</font> and <font style=\"background: lightgrey\">ECRGate</font> in the DAG (corresponding to the two-qubit basis gates on IBM® backends).\r\n```python\r\ndef run(\r\n        self,\r\n        dag: DAGCircuit,\r\n    ) -> DAGCircuit:\r\n \r\n        # collect all nodes in DAG and proceed if it is to be twirled\r\n        twirling_gate_classes = tuple(gate.base_class for gate in self.gates_to_twirl)\r\n        for node in dag.op_nodes():\r\n            if not isinstance(node.op, twirling_gate_classes):\r\n                continue\r\n \r\n            # random integer to select Pauli twirl pair\r\n            pidx = np.random.randint(0, len(self.twirl_set[node.op.name]),)\r\n            twirl_pair = self.twirl_set[node.op.name][pidx]\r\n \r\n            # instantiate mini_dag and attach quantum register\r\n            mini_dag = DAGCircuit()\r\n            register = QuantumRegister(2)\r\n            mini_dag.add_qreg(register)\r\n \r\n            # apply left Pauli, gate to twirl, and right Pauli to empty mini-DAG\r\n            mini_dag.apply_operation_back(twirl_pair[0].to_instruction(), [register[0], register[1]])\r\n            mini_dag.apply_operation_back(node.op, [register[0], register[1]])\r\n            mini_dag.apply_operation_back(twirl_pair[1].to_instruction(), [register[0], register[1]])\r\n \r\n            # substitute gate to twirl node with twirling mini-DAG\r\n            dag.substitute_node_with_dag(node, mini_dag)\r\n \r\n        return dag\r\n```\r\n# In the next node, we will show you how to use this <font style=\"background: lightgrey\">PauliTwirl</font> transpiler pass.\r\n"
    },
    {
        "id": "d66d51453976f9dc",
        "type": "use-the-transpiler-pass",
        "z": "93383abc3079eac8",
        "name": "Use PauliTwirl transpiler pass",
        "x": 1150,
        "y": 740,
        "wires": [
            [
                "4a8fd2c56e1bb1d4",
                "1688bb918ef50b98",
                "b14d5b0dcf5aa14e"
            ]
        ],
        "info": "# In this node, we use the pass created above to transpile a circuit. The code snippet below create a simple circuit with <font style=\"background: lightgrey\">cx</font>s and <font style=\"background: lightgrey\">ecr</font>s.\r\n```python\r\nqc = QuantumCircuit(3)\r\nqc.cx(0, 1)\r\nqc.ecr(1, 2)\r\nqc.ecr(1, 0)\r\nqc.cx(2, 1)\r\nqc.draw('mpl')\r\n```\r\n# You can check the image of this circuit in the \"Circuit Image Output\" node.\r\n&nbsp;\r\n# Then, to apply the custom pass, build a pass manager using the <font style=\"background: lightgrey\">PauliTwirl</font> pass and run it on 50 circuits. \r\n```python\r\npm = PassManager([PauliTwirl()])\r\ntwirled_qcs = [pm.run(qc) for _ in range(50)]\r\n```\r\n# Check the image of the tranpiled circuit in the \"Circuit after transpilation Output\" node. You can see each two-qubit gate is now sandwiched between two Paulis.\r\n&nbsp;\r\n# The operators are the same if <font style=\"background: lightgrey\">Operator</font> from <font style=\"background: lightgrey\">qiskit.quantum_info</font> is used:\r\n```python\r\nnp.all([Operator(twirled_qc).equiv(qc) for twirled_qc in twirled_qcs])\r\n```\r\n# The output should be _True_ in \"Same Operators\" node."
    },
    {
        "id": "4a8fd2c56e1bb1d4",
        "type": "image",
        "z": "93383abc3079eac8",
        "name": "Circuit Image Output",
        "width": "320",
        "data": "payload.result.result_image",
        "dataType": "msg",
        "thumbnail": false,
        "active": true,
        "pass": false,
        "outputs": 0,
        "x": 1680,
        "y": 740,
        "wires": []
    },
    {
        "id": "1688bb918ef50b98",
        "type": "image",
        "z": "93383abc3079eac8",
        "name": "Circuit after transpilation Output",
        "width": "960",
        "data": "payload.result.result_image_2",
        "dataType": "msg",
        "thumbnail": false,
        "active": true,
        "pass": false,
        "outputs": 0,
        "x": 1710,
        "y": 1000,
        "wires": []
    },
    {
        "id": "b14d5b0dcf5aa14e",
        "type": "debug",
        "z": "93383abc3079eac8",
        "name": "Same Operators",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.result.result_same",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1660,
        "y": 1220,
        "wires": []
    }
]