[
    {
        "id": "2223dd71286e972f",
        "type": "tab",
        "label": "Synthesize unitary operations",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3e96ad675dd194f3",
        "type": "inject",
        "z": "2223dd71286e972f",
        "name": "Start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 120,
        "wires": [
            [
                "b18041ba9ede7097"
            ]
        ]
    },
    {
        "id": "9720e6e4634c7287",
        "type": "image",
        "z": "2223dd71286e972f",
        "name": "Circuit Diagram",
        "width": "251",
        "data": "payload.result.circuit_diagram",
        "dataType": "msg",
        "thumbnail": false,
        "active": true,
        "pass": false,
        "outputs": 0,
        "x": 760,
        "y": 80,
        "wires": []
    },
    {
        "id": "903624d7aa9194a6",
        "type": "debug",
        "z": "2223dd71286e972f",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 240,
        "wires": []
    },
    {
        "id": "82042341e52e1ee8",
        "type": "Re-synthesis",
        "z": "2223dd71286e972f",
        "name": "Re-synthesis for circuit optimation",
        "info": "Sometimes it is beneficial to re-synthesize a long series of single- and two-qubit gates, if the length can be reduced. For example, the following circuit uses three two-qubit gates.",
        "x": 420,
        "y": 500,
        "wires": [
            [
                "362a933c8188a96e",
                "af6a556d6d4bf8a3",
                "8d40090af258275a"
            ]
        ]
    },
    {
        "id": "b18041ba9ede7097",
        "type": "Synthesize_unitary_operators",
        "z": "2223dd71286e972f",
        "name": "Synthesize_unitary_operators",
        "info": "A unitary operation describes a norm-preserving change to a quantum system. For <i>n</i> qubits, this change is described by a <i>2<sup>n</sup> &times; 2<sup>n</sup></i> dimensional, complex matrix <i>U</i> whose adjoint equals the inverse, that is <i>U<sup>&dagger;</sup> U = 1</i>.\n      \nSynthesizing specific unitary operations into a set of quantum gates is a fundamental task used, for example, in the design and application of quantum algorithms or in compiling quantum circuits.\n      \nWhile efficient synthesis is possible for certain classes of unitaries – like those composed of Clifford gates or having a tensor product structure – most unitaries do not fall into these categories. For general unitary matrices, synthesis is a complex task with computational costs that increase exponentially with the number of qubits. Therefore, if you know an efficient decomposition for the unitary you would like to implement, it will likely be better than a general synthesis.",
        "x": 390,
        "y": 120,
        "wires": [
            [
                "9720e6e4634c7287",
                "903624d7aa9194a6",
                "82042341e52e1ee8"
            ]
        ]
    },
    {
        "id": "362a933c8188a96e",
        "type": "image",
        "z": "2223dd71286e972f",
        "name": "Circuit Diagram",
        "width": "251",
        "data": "payload.result.circuit_diagram",
        "dataType": "msg",
        "thumbnail": false,
        "active": true,
        "pass": false,
        "outputs": 0,
        "x": 800,
        "y": 500,
        "wires": []
    },
    {
        "id": "af6a556d6d4bf8a3",
        "type": "debug",
        "z": "2223dd71286e972f",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 620,
        "wires": []
    },
    {
        "id": "4ce96814cbd0166e",
        "type": "image",
        "z": "2223dd71286e972f",
        "name": "Circuit Diagram",
        "width": "251",
        "data": "payload.result.circuit_diagram",
        "dataType": "msg",
        "thumbnail": false,
        "active": true,
        "pass": false,
        "outputs": 0,
        "x": 840,
        "y": 900,
        "wires": []
    },
    {
        "id": "2bebbf9fb4ae0013",
        "type": "debug",
        "z": "2223dd71286e972f",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 853.5078125,
        "y": 1088.5234375,
        "wires": []
    },
    {
        "id": "8d40090af258275a",
        "type": "Re-synthesize-decompose",
        "z": "2223dd71286e972f",
        "name": "Re-synthesize-decompose",
        "info": "However, after re-synthesizing with the following code, it only needs a single CX gate. (Here we use the QuantumCircuit.decompose() method to better visualize the gates used to re-synthesize the unitary.)",
        "x": 400,
        "y": 880,
        "wires": [
            [
                "4ce96814cbd0166e",
                "2bebbf9fb4ae0013"
            ]
        ]
    }
]