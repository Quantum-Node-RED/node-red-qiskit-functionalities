[
    {
        "id": "a23b25e47d37ac8d",
        "type": "tab",
        "label": "Add calibration to circuit",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ed0e04405ec10519",
        "type": "inject",
        "z": "a23b25e47d37ac8d",
        "name": "Test",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Test",
        "payloadType": "str",
        "x": 350,
        "y": 420,
        "wires": [
            [
                "37503e4b4816d9ac"
            ]
        ]
    },
    {
        "id": "37503e4b4816d9ac",
        "type": "pulse-build-circuit",
        "z": "a23b25e47d37ac8d",
        "name": "Build a circuit",
        "info": "# This Node build a simple Bell state circuit using following python code.\r\n```python\r\nfrom qiskit import QuantumCircuit\r\n \r\ncirc = QuantumCircuit(2, 2)\r\ncirc.h(0)\r\ncirc.cx(0, 1)\r\ncirc.measure(0, 0)\r\ncirc.measure(1, 1)\r\n \r\ncirc.draw('mpl')\r\n```\r\n# This code snippet defines a quantum circuit consisting of two qubits and two classical bits. It begins by applying a Hadamard gate (circ.h(0)) to the first qubit, placing it in a superposition state. Subsequently, a CNOT gate (circ.cx(0, 1)) is applied, entangling the two qubits. The circuit then measures both qubits (circ.measure(0, 0) and circ.measure(1, 1)) and stores the measurement outcomes in corresponding classical bits.\r\n&nbsp;\r\n# The image of the circuit will be shown below in the \"Bell state circuit\" node.\r\n\r\n***\r\n&nbsp;\r\n## **Node Output:**\r\n- # Object: `circ` (Type: _qiskit.circuit.quantumcircuit_)\r\n- # Image: The image of variable `circ`",
        "x": 570,
        "y": 420,
        "wires": [
            [
                "70aaeaa853f21414",
                "72df90c2812795ae"
            ]
        ]
    },
    {
        "id": "158d981437a17bae",
        "type": "pulse-build-calibration",
        "z": "a23b25e47d37ac8d",
        "name": "Build a calibration",
        "info": "## **Node Input:**\r\n- # Object: `circ` (Type: _qiskit.circuit.quantumcircuit_)\r\n\r\n***\r\n&nbsp;\r\n# This node defines a calibration for the Hadamard gate on qubit 0 which built in previous node.\r\n&nbsp;\r\n# In practice, the pulse shape and its parameters would be optimized through a series of calibration experiments. For this demonstration, the Hadamard will be a Gaussian pulse. You play the pulse on the drive channel of qubit 0.\r\n&nbsp;\r\n# The python code is shown below. For more information on calibrations, see the [Qiskit Experiments tutorial.](https://qiskit-extensions.github.io/qiskit-experiments/tutorials/calibrations.html#)\r\n```python\r\nfrom qiskit import pulse\r\nfrom qiskit.pulse.library import Gaussian\r\nfrom qiskit_ibm_runtime.fake_provider import FakeValenciaV2\r\n \r\nbackend = FakeValenciaV2()\r\n \r\nwith pulse.build(backend, name='hadamard') as h_q0:\r\n    pulse.play(Gaussian(duration=128, amp=0.1, sigma=16), pulse.drive_channel(0))\r\n```\r\n# The image of the schedule we drew is shown in the \"Schedule Diagram\" node.\r\n\r\n***\r\n&nbsp;\r\n## **Node Output:**\r\n- # Object: `circ` (Type: _qiskit.circuit.quantumcircuit_)\r\n- # Object: `h_q0` (Type: _qiskit.pulse.schedule.ScheduleBlock_)\r\n- # Image: The image of variable `h_q0`\r\n",
        "x": 970,
        "y": 420,
        "wires": [
            [
                "c39d1bcc1e0ffb65",
                "b2d01c6b2f933c95"
            ]
        ]
    },
    {
        "id": "ca9519ed680b88e6",
        "type": "pulse-link-cal-to-cir",
        "z": "a23b25e47d37ac8d",
        "name": "Link calibration to circuit",
        "info": "## **Node Input:**\r\n- # Object: `circ` (Type: _qiskit.circuit.quantumcircuit_)\r\n- # Object: `h_q0` (Type: _qiskit.pulse.schedule.ScheduleBlock_)\r\n\r\n***\r\n&nbsp;\r\n# Now we need to map the calibration to the circuit. The circuit method <font style='background: lightgrey'>_`add_calibration`_</font> needs information about the gate and a reference to the schedule to complete the mapping:\r\n```python\r\nQuantumCircuit.add_calibration(gate, qubits, schedule, parameters)\r\n```\r\n&nbsp;\r\n# The gate can be either a circuit.Gate object or the name of the gate. Usually, you'll need a different schedule for each unique set of qubits and parameters. Since the Hadamard gate doesn't have any parameters, there is no need to supply any. So we can link the calibration 'h_q0' to circuit 'circ' by using following python code:\r\n```python\r\ncirc.add_calibration('h', [0], h_q0)\r\n```\r\n&nbsp;\r\n# Lastly, note that the transpiler will respect your calibrations. In other words, the transpiler will generate a series of instructions aimed at optimizing your circuit. Use it as you normally would.\r\n```python\r\nfrom qiskit_ibm_runtime.fake_provider import FakeHanoiV2\r\nfrom qiskit.transpiler.preset_passmanagers import generate_preset_pass_manager\r\n \r\nbackend = FakeHanoiV2()\r\npassmanager = generate_preset_pass_manager(optimization_level=1, backend=backend)\r\ncirc = passmanager.run(circ)\r\n \r\n# Print instructions that only affect qubits 0 and 1\r\nfor instruction, qubits in FakeHanoiV2().instructions:\r\n    if qubits and set(qubits).issubset({0, 1}):\r\n        print(instruction, qubits)\r\ncirc.draw('mpl', idle_wires=False)\r\n```\r\n&nbsp;\r\n# The generated optimization instructions are transmitted to the \"Show optimizing instruction\" node, and you can open the debug palette on the right to view these instructions. The diagram of optimized quantum circuit is displayed below the \"Optimized circuit\" node  (our example is too simple for the transpiler to optimize, so the output circuit is the same as what we built before).\r\n\r\n***\r\n&nbsp;\r\n## **Node Output:**\r\n- # List: A list of optimized instructions (Type: _qiskit.circuit.Instruction_)\r\n- # Image: The image of optimized circuit `circ`\r\n",
        "x": 1410,
        "y": 420,
        "wires": [
            [
                "0a65ef1db96866f3"
            ]
        ]
    },
    {
        "id": "70aaeaa853f21414",
        "type": "move-to-next-node",
        "z": "a23b25e47d37ac8d",
        "name": "Next",
        "x": 770,
        "y": 420,
        "wires": [
            [
                "158d981437a17bae"
            ]
        ]
    },
    {
        "id": "c39d1bcc1e0ffb65",
        "type": "move-to-next-node",
        "z": "a23b25e47d37ac8d",
        "name": "Next",
        "x": 1190,
        "y": 420,
        "wires": [
            [
                "ca9519ed680b88e6"
            ]
        ]
    },
    {
        "id": "72df90c2812795ae",
        "type": "image",
        "z": "a23b25e47d37ac8d",
        "name": "",
        "width": 160,
        "data": "payload.result.result_image",
        "dataType": "msg",
        "thumbnail": false,
        "active": true,
        "pass": false,
        "outputs": 0,
        "x": 760,
        "y": 600,
        "wires": []
    },
    {
        "id": "b2d01c6b2f933c95",
        "type": "image",
        "z": "a23b25e47d37ac8d",
        "name": "",
        "width": 160,
        "data": "payload.result.result_image",
        "dataType": "msg",
        "thumbnail": false,
        "active": true,
        "pass": false,
        "outputs": 0,
        "x": 1180,
        "y": 580,
        "wires": []
    },
    {
        "id": "0a65ef1db96866f3",
        "type": "image",
        "z": "a23b25e47d37ac8d",
        "name": "",
        "width": 160,
        "data": "payload.result.result_image",
        "dataType": "msg",
        "thumbnail": false,
        "active": true,
        "pass": false,
        "outputs": 0,
        "x": 1660,
        "y": 420,
        "wires": []
    }
]