[
    {
        "id": "02bc8f0f0ed7741a",
        "type": "inject",
        "z": "87a5db044daceccf",
        "name": "Start",
        "props": [
            {
                "p": "payload.numQubits",
                "v": "2",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 360,
        "wires": [
            [
                "57be4700ab970020"
            ]
        ]
    },
    {
        "id": "9477e9b498be69d1",
        "type": "debug",
        "z": "87a5db044daceccf",
        "name": "Text circuit output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.result",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 300,
        "wires": []
    },
    {
        "id": "9fe3662966fc1ee5",
        "type": "image",
        "z": "87a5db044daceccf",
        "name": "",
        "width": "500",
        "data": "payload.result.circuit_image",
        "dataType": "msg",
        "thumbnail": false,
        "active": true,
        "pass": false,
        "outputs": 0,
        "x": 880,
        "y": 60,
        "wires": []
    },
    {
        "id": "740466ad732505f6",
        "type": "debug",
        "z": "87a5db044daceccf",
        "name": "Text circuit output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.result",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 400,
        "wires": []
    },
    {
        "id": "563f44bfa01a23a4",
        "type": "image",
        "z": "87a5db044daceccf",
        "name": "",
        "width": "500",
        "data": "payload.result.circuit_image",
        "dataType": "msg",
        "thumbnail": false,
        "active": true,
        "pass": false,
        "outputs": 0,
        "x": 1780,
        "y": 420,
        "wires": []
    },
    {
        "id": "2e3f03809c4df394",
        "type": "image",
        "z": "87a5db044daceccf",
        "name": "",
        "width": "400",
        "data": "payload.result.circuit_image",
        "dataType": "msg",
        "thumbnail": false,
        "active": true,
        "pass": false,
        "outputs": 0,
        "x": 1480,
        "y": 60,
        "wires": []
    },
    {
        "id": "d3d8dd12ef74c588",
        "type": "image",
        "z": "87a5db044daceccf",
        "name": "",
        "width": "400",
        "data": "payload.result.circuit_image",
        "dataType": "msg",
        "thumbnail": false,
        "active": true,
        "pass": false,
        "outputs": 0,
        "x": 1160,
        "y": 440,
        "wires": []
    },
    {
        "id": "3c132c673dcb676d",
        "type": "image",
        "z": "87a5db044daceccf",
        "name": "",
        "width": "400",
        "data": "payload.result.circuit_image",
        "dataType": "msg",
        "thumbnail": false,
        "active": true,
        "pass": false,
        "outputs": 0,
        "x": 2100,
        "y": 60,
        "wires": []
    },
    {
        "id": "57be4700ab970020",
        "type": "statevector",
        "z": "87a5db044daceccf",
        "name": "Statevector",
        "info": "# [Plot quantum states guide.](https://docs.quantum.ibm.com/guides/plot-quantum-states#)\r\n&nbsp;\r\n# A quantum state is either a density matrix ùúå (Hermitian matrix) or statevector ‚à£ùúì‚ü© (complex vector).\r\n# Qiskit represents quantum states through the <font style='background: lightgrey'>_`Statevector`_</font> and <font style='background: lightgrey'>_`DensityMatrix`_</font> classes and provides many visualization functions.\r\n# Statevectors default to \"ket notation\", whereas density matrices are displayed as a 2x2 matrix.\r\n# This code snipped uses <font style='background: lightgrey'>_`latex_source`_</font> which gives the raw LaTeX string,# but <font style='background: lightgrey'>_`latex`_</font> can also be used display more nicely in Jupyter notebooks.\r\n```python\r\nfrom math import pi\r\nfrom qiskit import QuantumCircuit\r\nfrom qiskit.quantum_info import Statevector\r\n\r\n# Create a Bell state for demonstration\r\nqc = QuantumCircuit(2)\r\nqc.h(0)\r\nqc.crx(pi/2, 0, 1)\r\npsi = Statevector(qc)\r\n\r\npsi.draw(\"latex_source\")  # psi is a Statevector object\r\n```\r\n ",
        "x": 270,
        "y": 360,
        "wires": [
            [
                "9477e9b498be69d1",
                "ec6ce7192962498e"
            ]
        ]
    },
    {
        "id": "ec6ce7192962498e",
        "type": "density-matrix",
        "z": "87a5db044daceccf",
        "name": "Density Matrix",
        "info": "# [Plot quantum states guide.](https://docs.quantum.ibm.com/guides/plot-quantum-states#)\r\n&nbsp;\r\n# A quantum state is either a density matrix ùúå (Hermitian matrix) or statevector ‚à£ùúì‚ü© (complex vector).\r\n# Qiskit represents quantum states through the <font style='background: lightgrey'>_`Statevector`_</font> and <font style='background: lightgrey'>_`DensityMatrix`_</font> classes and provides many visualization functions.\r\n# Statevectors default to \"ket notation\", whereas density matrices are displayed as a 2x2 matrix.\r\n# This code snipped uses <font style='background: lightgrey'>_`latex_source`_</font> which gives the raw LaTeX string,# but <font style='background: lightgrey'>_`latex`_</font> can also be used display more nicely in Jupyter notebooks.\r\n```python\r\nfrom math import pi\r\nfrom qiskit import QuantumCircuit\r\nfrom qiskit.quantum_info import Statevector\r\nfrom qiskit.quantum_info import DensityMatrix\r\n\r\n# Create a Bell state for demonstration\r\nqc = QuantumCircuit(2)\r\nqc.h(0)\r\nqc.crx(pi/2, 0, 1)\r\npsi = Statevector(qc)\r\n\r\nDensityMatrix(psi).draw(\"latex\")  # convert to a DensityMatrix and draw\r\n```\r\n ",
        "x": 440,
        "y": 360,
        "wires": [
            [
                "740466ad732505f6",
                "40507dd9fd8dfeb2"
            ]
        ]
    },
    {
        "id": "40507dd9fd8dfeb2",
        "type": "plot-state-city",
        "z": "87a5db044daceccf",
        "name": "Visualization: Plot State City",
        "info": "# [Plot quantum states guide.](https://docs.quantum.ibm.com/guides/plot-quantum-states#)\r\n&nbsp;\r\n# This plot displays the real and imaginary parts of each density matrix element in two three-dimensional bar charts.It's called a \"city\" plot because the bars resemble skyscrapers in a city. The state we're plotting has the following density matrix.\r\n# In this node, the <font style='background: lightgrey'>_`plot_state_city()`_</font> function of the\r\n<font style='background: lightgrey'>_`qiskit.visualization`_</font> module is used to plot the cityscape of a quantum state\r\nAlternitively <font style='background: lightgrey'>_`draw(\"city\")`_</font> can be used.\r\n```python\r\nfrom math import pi\r\nfrom qiskit import QuantumCircuit\r\nfrom qiskit.quantum_info import Statevector\r\nfrom qiskit.visualization import plot_state_city\r\n\r\n# Create a Bell state for demonstration\r\nqc = QuantumCircuit(2)\r\nqc.h(0)\r\nqc.crx(pi/2, 0, 1)\r\npsi = Statevector(qc)\r\n\r\nplot_state_city(psi)\r\n```\r\n ",
        "x": 660,
        "y": 360,
        "wires": [
            [
                "91d7df18a431c5fc",
                "9fe3662966fc1ee5"
            ]
        ]
    },
    {
        "id": "91d7df18a431c5fc",
        "type": "plot-state-hinton",
        "z": "87a5db044daceccf",
        "name": "Visualization: Plot State Hinton",
        "info": "# [Plot quantum states guide.](https://docs.quantum.ibm.com/guides/plot-quantum-states#)\r\n&nbsp;\r\n# This plot is very similar to the \"city\" plot, but the magnitude of each element is represented by the size of a square rather than the height of a bar. White squares represent elements with positive values, and black squares represent elements with negative values. The state we're plotting has the following density matrix.\r\n# In this node, the <font style='background: lightgrey'>_`plot_state_hinton()`_</font> function of the\r\n<font style='background: lightgrey'>_`qiskit.visualization`_</font> module is used to plot the hinton diagram for the density matrix of a quantum state.\r\nAlternitively <font style='background: lightgrey'>_`draw(\"hinton\")`_</font> can be used.\r\n```python\r\nfrom math import pi\r\nfrom qiskit import QuantumCircuit\r\nfrom qiskit.quantum_info import Statevector\r\nfrom qiskit.visualization import plot_state_hinton\r\n\r\n# Create a Bell state for demonstration\r\nqc = QuantumCircuit(2)\r\nqc.h(0)\r\nqc.crx(pi/2, 0, 1)\r\npsi = Statevector(qc)\r\n\r\nplot_state_hinton(psi)\r\n```\r\n ",
        "x": 930,
        "y": 360,
        "wires": [
            [
                "d3d8dd12ef74c588",
                "01131a24f2e15cdd"
            ]
        ]
    },
    {
        "id": "01131a24f2e15cdd",
        "type": "plot-state-paulivec",
        "z": "87a5db044daceccf",
        "name": "Visualization: Plot State Pauli vector",
        "info": "# [Plot quantum states guide.](https://docs.quantum.ibm.com/guides/plot-quantum-states#)\r\n&nbsp;\r\n# An observable is a way of measuring a quantum state such that the possible measurement outcomes are real numbers. The expected value of the outcome is also known as the expectation value of the observable on that state, and it can be thought of as the average of infinitely many observations of that state.\r\n# Tensor products of Pauli matrices are all observables that return +1 or -1. This plot displays the expectation values of the state on different Pauli operators as a bar chart. All density matrices can be written as a sum of these Pauli matrices, weighted by their expectation values.\r\n# In this node, the <font style='background: lightgrey'>_`plot_state_paulivec()`_</font> function of the <font style='background: lightgrey'>_`qiskit.visualization`_</font> module is used to plot the Pauli-vector representation of a quantum state as bar graph.\r\nAlternitively <font style='background: lightgrey'>_`draw(\"paulivec\")`_</font> can be used.\r\n```python\r\nfrom math import pi\r\nfrom qiskit import QuantumCircuit\r\nfrom qiskit.quantum_info import Statevector\r\nfrom qiskit.visualization import plot_state_paulivec\r\n\r\n# Create a Bell state for demonstration\r\nqc = QuantumCircuit(2)\r\nqc.h(0)\r\nqc.crx(pi/2, 0, 1)\r\npsi = Statevector(qc)\r\n\r\nplot_state_paulivec(psi)\r\n```\r\n ",
        "x": 1230,
        "y": 360,
        "wires": [
            [
                "2e3f03809c4df394",
                "1ddc43ed4fbdec8f"
            ]
        ]
    },
    {
        "id": "1ddc43ed4fbdec8f",
        "type": "plot-state-qsphere",
        "z": "87a5db044daceccf",
        "name": "Visualization: Plot State QSphere",
        "info": "# [Plot quantum states guide.](https://docs.quantum.ibm.com/guides/plot-quantum-states#)\r\n&nbsp;\r\n# The \"QSphere\" is a Qiskit-unique view of a quantum state in which the amplitude and phase of each element in a statevector is plotted on the surface of a sphere. The thickness of each dot represents the amplitude, and the color represents the phase. For mixed states it will show a sphere for each component.\r\n# In this node, the <font style='background: lightgrey'>_`plot_state_qsphere()`_</font> function of the <font style='background: lightgrey'>_`qiskit.visualization`_</font> module is used to plot the qsphere representation of a quantum state\r\nAlternitively <font style='background: lightgrey'>_`draw(\"qsphere\")`_</font> can be used.\r\n```python\r\nfrom math import pi\r\nfrom qiskit import QuantumCircuit\r\nfrom qiskit.quantum_info import Statevector\r\nfrom qiskit.visualization import plot_state_qsphere\r\n\r\n# Create a Bell state for demonstration\r\nqc = QuantumCircuit(2)\r\nqc.h(0)\r\nqc.crx(pi/2, 0, 1)\r\npsi = Statevector(qc)\r\n\r\nplot_state_qsphere(psi)\r\n```\r\n ",
        "x": 1540,
        "y": 360,
        "wires": [
            [
                "563f44bfa01a23a4",
                "2a68719c22c80ab1"
            ]
        ]
    },
    {
        "id": "2a68719c22c80ab1",
        "type": "plot-bloch-multivector",
        "z": "87a5db044daceccf",
        "name": "Visualization: Plot Bloch Multivector",
        "info": "# [Plot quantum states guide.](https://docs.quantum.ibm.com/guides/plot-quantum-states#)\r\n&nbsp;\r\n# The Bloch vector of a qubit state is its expectation value in the X, Y, and Z Pauli observables mapped to the X, Y, and Z axes in three-dimensional space. This plot projects multi-qubit quantum states onto the single-qubit space and plots each qubit on a Bloch sphere. This visualization only shows the expectation values of individual qubits.It can't show correlations between qubits and so can't fully describe entangled quantum states.\r\n# In this node, the <font style='background: lightgrey'>_`plot_bloch_multivector()`_</font> function of the <font style='background: lightgrey'>_`qiskit.visualization`_</font> module is used to plot a Bloch sphere for each qubit\r\nAlternitively <font style='background: lightgrey'>_`draw(\"bloch\")`_</font> can be used.\r\n```python\r\nfrom math import pi\r\nfrom qiskit import QuantumCircuit\r\nfrom qiskit.quantum_info import Statevector\r\nfrom qiskit.visualization import plot_bloch_multivector\r\n\r\n# Create a Bell state for demonstration\r\nqc = QuantumCircuit(2)\r\nqc.h(0)\r\nqc.crx(pi/2, 0, 1)\r\npsi = Statevector(qc)\r\n\r\nplot_bloch_multivector(psi)\r\n```\r\n ",
        "x": 1840,
        "y": 360,
        "wires": [
            [
                "3c132c673dcb676d"
            ]
        ]
    }
]